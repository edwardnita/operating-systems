"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[80053],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Intro","href":"/operating-systems/","docId":"Introduction/Intro/README"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Introduction/"},{"type":"category","label":"Lecture","items":[{"type":"link","label":"Software Stack","href":"/operating-systems/Lecture/Software Stack/Software-Stack","docId":"Lecture/Software Stack/Software-Stack"},{"type":"link","label":"Data","href":"/operating-systems/Lecture/Data/","docId":"Lecture/Data/Data"},{"type":"link","label":"Compute","href":"/operating-systems/Lecture/Compute/","docId":"Lecture/Compute/Compute"},{"type":"link","label":"IO","href":"/operating-systems/Lecture/IO/","docId":"Lecture/IO/IO"},{"type":"link","label":"Application Interaction","href":"/operating-systems/Lecture/Application Interaction/Application-Interaction","docId":"Lecture/Application Interaction/Application-Interaction"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Lecture/"},{"type":"category","label":"Lab","items":[{"type":"link","label":"Setting up the Lab Environment","href":"/operating-systems/Lab/Setting up the Lab Environment/lab-setup","docId":"Lab/Setting up the Lab Environment/lab-setup"},{"type":"category","label":"Software Stack","items":[{"type":"link","label":"Overview","href":"/operating-systems/Lab/Software Stack/Overview/content/overview","docId":"Lab/Software Stack/Overview/content/overview"},{"type":"link","label":"Modern Software Stacks","href":"/operating-systems/Lab/Software Stack/Modern Software Stacks/content/modern-sw-stack","docId":"Lab/Software Stack/Modern Software Stacks/content/modern-sw-stack"},{"type":"link","label":"Basic System Calls","href":"/operating-systems/Lab/Software Stack/Basic System Calls/content/basic-syscall","docId":"Lab/Software Stack/Basic System Calls/content/basic-syscall"},{"type":"link","label":"System Call Wrapper","href":"/operating-systems/Lab/Software Stack/System Call Wrapper/content/syscall-wrapper","docId":"Lab/Software Stack/System Call Wrapper/content/syscall-wrapper"},{"type":"link","label":"Common Functions","href":"/operating-systems/Lab/Software Stack/Common Functions/content/common-functions","docId":"Lab/Software Stack/Common Functions/content/common-functions"},{"type":"link","label":"Libc","href":"/operating-systems/Lab/Software Stack/Libc/content/libc","docId":"Lab/Software Stack/Libc/content/libc"},{"type":"link","label":"Static-dynamic","href":"/operating-systems/Lab/Software Stack/Static-dynamic/content/static-dynamic","docId":"Lab/Software Stack/Static-dynamic/content/static-dynamic"},{"type":"link","label":"Libcall-Syscall","href":"/operating-systems/Lab/Software Stack/Libcall-Syscall/content/libcall-syscall","docId":"Lab/Software Stack/Libcall-Syscall/content/libcall-syscall"},{"type":"link","label":"High-Level Languages","href":"/operating-systems/Lab/Software Stack/High-Level Languages/content/high-level-lang","docId":"Lab/Software Stack/High-Level Languages/content/high-level-lang"},{"type":"link","label":"App Investigation","href":"/operating-systems/Lab/Software Stack/App Investigation/content/app-investigate","docId":"Lab/Software Stack/App Investigation/content/app-investigate"},{"type":"link","label":"Arena","href":"/operating-systems/Lab/Software Stack/Arena/content/arena","docId":"Lab/Software Stack/Arena/content/arena"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Software Stack/"},{"type":"category","label":"Data","items":[{"type":"link","label":"Overview","href":"/operating-systems/Lab/Data/Overview/content/overview","docId":"Lab/Data/Overview/content/overview"},{"type":"link","label":"Working with Memory","href":"/operating-systems/Lab/Data/Working with Memory/content/working-memory","docId":"Lab/Data/Working with Memory/content/working-memory"},{"type":"link","label":"Process Memory","href":"/operating-systems/Lab/Data/Process Memory/content/process-memory","docId":"Lab/Data/Process Memory/content/process-memory"},{"type":"link","label":"Investigate Memory","href":"/operating-systems/Lab/Data/Investigate Memory/content/investigate-memory","docId":"Lab/Data/Investigate Memory/content/investigate-memory"},{"type":"link","label":"Memory Security","href":"/operating-systems/Lab/Data/Memory Security/content/memory-security","docId":"Lab/Data/Memory Security/content/memory-security"},{"type":"link","label":"Arena","href":"/operating-systems/Lab/Data/Arena/content/arena","docId":"Lab/Data/Arena/content/arena"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Data/"},{"type":"category","label":"Compute","items":[{"type":"link","label":"Overview","href":"/operating-systems/Lab/Compute/Overview/content/overview","docId":"Lab/Compute/Overview/content/overview"},{"type":"link","label":"Hardware Perspective","href":"/operating-systems/Lab/Compute/Hardware Perspective/content/hardware-perspective","docId":"Lab/Compute/Hardware Perspective/content/hardware-perspective"},{"type":"link","label":"Processes","href":"/operating-systems/Lab/Compute/Processes/content/processes","docId":"Lab/Compute/Processes/content/processes"},{"type":"link","label":"Threads","href":"/operating-systems/Lab/Compute/Threads/content/threads","docId":"Lab/Compute/Threads/content/threads"},{"type":"link","label":"Processes-threads-apache2","href":"/operating-systems/Lab/Compute/Processes-threads-apache2/content/processes-threads-apache2","docId":"Lab/Compute/Processes-threads-apache2/content/processes-threads-apache2"},{"type":"link","label":"Copy-on-Write","href":"/operating-systems/Lab/Compute/Copy-on-Write/content/copy-on-write","docId":"Lab/Compute/Copy-on-Write/content/copy-on-write"},{"type":"link","label":"Synchronization","href":"/operating-systems/Lab/Compute/Synchronization/content/synchronization","docId":"Lab/Compute/Synchronization/content/synchronization"},{"type":"link","label":"Scheduling","href":"/operating-systems/Lab/Compute/Scheduling/content/scheduling","docId":"Lab/Compute/Scheduling/content/scheduling"},{"type":"link","label":"Arena","href":"/operating-systems/Lab/Compute/Arena/content/arena","docId":"Lab/Compute/Arena/content/arena"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Compute/"},{"type":"category","label":"I/O","items":[{"type":"link","label":"Overview","href":"/operating-systems/Lab/I/O/Overview/content/overview","docId":"Lab/I/O/Overview/content/overview"},{"type":"link","label":"File Handlers","href":"/operating-systems/Lab/I/O/File Handlers/content/file-handlers","docId":"Lab/I/O/File Handlers/content/file-handlers"},{"type":"link","label":"File Descriptors","href":"/operating-systems/Lab/I/O/File Descriptors/content/file-descriptors","docId":"Lab/I/O/File Descriptors/content/file-descriptors"},{"type":"link","label":"Redirections","href":"/operating-systems/Lab/I/O/Redirections/content/redirections","docId":"Lab/I/O/Redirections/content/redirections"},{"type":"link","label":"Pipes","href":"/operating-systems/Lab/I/O/Pipes/content/pipes","docId":"Lab/I/O/Pipes/content/pipes"},{"type":"link","label":"Local I/O in Action","href":"/operating-systems/Lab/I/O/Local I/O in Action/content/local-io-in-action","docId":"Lab/I/O/Local I/O in Action/content/local-io-in-action"},{"type":"link","label":"Remote I/O","href":"/operating-systems/Lab/I/O/Remote I/O/content/remote-io","docId":"Lab/I/O/Remote I/O/content/remote-io"},{"type":"link","label":"Networking 101","href":"/operating-systems/Lab/I/O/Networking 101/content/networking-101","docId":"Lab/I/O/Networking 101/content/networking-101"},{"type":"link","label":"Client-Server Model","href":"/operating-systems/Lab/I/O/Client-Server Model/content/client-server-model","docId":"Lab/I/O/Client-Server Model/content/client-server-model"},{"type":"link","label":"Beyond Network Sockets","href":"/operating-systems/Lab/I/O/Beyond Network Sockets/content/beyond-network-sockets","docId":"Lab/I/O/Beyond Network Sockets/content/beyond-network-sockets"},{"type":"link","label":"File Mappings","href":"/operating-systems/Lab/I/O/File Mappings/content/file-mappings","docId":"Lab/I/O/File Mappings/content/file-mappings"},{"type":"link","label":"I/O Internals","href":"/operating-systems/Lab/I/O/I/O Internals/content/io-internals","docId":"Lab/I/O/I/O Internals/content/io-internals"},{"type":"link","label":"Zero-Copy","href":"/operating-systems/Lab/I/O/Zero-Copy/content/zero-copy","docId":"Lab/I/O/Zero-Copy/content/zero-copy"},{"type":"link","label":"Asynchronous I/O","href":"/operating-systems/Lab/I/O/Asynchronous I/O/content/async-io","docId":"Lab/I/O/Asynchronous I/O/content/async-io"},{"type":"link","label":"I/O Multiplexing","href":"/operating-systems/Lab/I/O/I/O Multiplexing/content/io-multiplexing","docId":"Lab/I/O/I/O Multiplexing/content/io-multiplexing"},{"type":"link","label":"Arena","href":"/operating-systems/Lab/I/O/Arena/content/arena","docId":"Lab/I/O/Arena/content/arena"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/I/O/"},{"type":"category","label":"Application Interaction","items":[{"type":"link","label":"Overview","href":"/operating-systems/Lab/Application Interaction/Overview/content/overview","docId":"Lab/Application Interaction/Overview/content/overview"},{"type":"link","label":"Time Server","href":"/operating-systems/Lab/Application Interaction/Time Server/content/time-server","docId":"Lab/Application Interaction/Time Server/content/time-server"},{"type":"link","label":"Password Cracker","href":"/operating-systems/Lab/Application Interaction/Password Cracker/content/password-cracker","docId":"Lab/Application Interaction/Password Cracker/content/password-cracker"},{"type":"link","label":"The X Window System","href":"/operating-systems/Lab/Application Interaction/The X Window System/content/x-window-system","docId":"Lab/Application Interaction/The X Window System/content/x-window-system"},{"type":"link","label":"D-Bus","href":"/operating-systems/Lab/Application Interaction/D-Bus/content/dbus","docId":"Lab/Application Interaction/D-Bus/content/dbus"},{"type":"link","label":"OS Cloud","href":"/operating-systems/Lab/Application Interaction/OS Cloud/content/os-cloud","docId":"Lab/Application Interaction/OS Cloud/content/os-cloud"},{"type":"link","label":"Arena","href":"/operating-systems/Lab/Application Interaction/Arena/content/arena","docId":"Lab/Application Interaction/Arena/content/arena"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Application Interaction/"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Lab/"},{"type":"category","label":"Assignments","items":[{"type":"link","label":"Mini Libc","href":"/operating-systems/Assignments/Mini Libc/","docId":"Assignments/Mini Libc/README"},{"type":"link","label":"Memory Allocator","href":"/operating-systems/Assignments/Memory Allocator/","docId":"Assignments/Memory Allocator/README"},{"type":"link","label":"Parallel Graph","href":"/operating-systems/Assignments/Parallel Graph/","docId":"Assignments/Parallel Graph/README"},{"type":"link","label":"Mini Shell","href":"/operating-systems/Assignments/Mini Shell/","docId":"Assignments/Mini Shell/README"},{"type":"link","label":"Asynchronous Web Server","href":"/operating-systems/Assignments/Asynchronous Web Server/","docId":"Assignments/Asynchronous Web Server/README"}],"collapsed":true,"collapsible":true,"href":"/operating-systems/Assignments/"}]},"docs":{"Assignments/Asynchronous Web Server/README":{"id":"Assignments/Asynchronous Web Server/README","title":"Asynchronous Web Server","description":"","sidebar":"sidebar"},"Assignments/Memory Allocator/README":{"id":"Assignments/Memory Allocator/README","title":"Memory Allocator","description":"","sidebar":"sidebar"},"Assignments/Mini Libc/README":{"id":"Assignments/Mini Libc/README","title":"Mini-libc","description":"Objectives","sidebar":"sidebar"},"Assignments/Mini Shell/README":{"id":"Assignments/Mini Shell/README","title":"Minishell","description":"","sidebar":"sidebar"},"Assignments/Parallel Graph/README":{"id":"Assignments/Parallel Graph/README","title":"Parallel Graph","description":"","sidebar":"sidebar"},"Introduction/Intro/README":{"id":"Introduction/Intro/README","title":"Intro","description":"This is a landing page for your course.","sidebar":"sidebar"},"Lab/Application Interaction/Arena/content/arena":{"id":"Lab/Application Interaction/Arena/content/arena","title":"Arena","description":"D-Bus","sidebar":"sidebar"},"Lab/Application Interaction/Arena/content/dbus":{"id":"Lab/Application Interaction/Arena/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux."},"Lab/Application Interaction/Arena/content/os-cloud":{"id":"Lab/Application Interaction/Arena/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud."},"Lab/Application Interaction/Arena/content/overview":{"id":"Lab/Application Interaction/Arena/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact."},"Lab/Application Interaction/Arena/content/password-cracker":{"id":"Lab/Application Interaction/Arena/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."},"Lab/Application Interaction/Arena/content/time-server":{"id":"Lab/Application Interaction/Arena/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c."},"Lab/Application Interaction/Arena/content/x-window-system":{"id":"Lab/Application Interaction/Arena/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System."},"Lab/Application Interaction/Arena/quiz/time-server":{"id":"Lab/Application Interaction/Arena/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/Arena/quiz/time-server-interop":{"id":"Lab/Application Interaction/Arena/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Application Interaction/D-Bus/content/arena":{"id":"Lab/Application Interaction/D-Bus/content/arena","title":"Arena","description":"D-Bus"},"Lab/Application Interaction/D-Bus/content/dbus":{"id":"Lab/Application Interaction/D-Bus/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux.","sidebar":"sidebar"},"Lab/Application Interaction/D-Bus/content/os-cloud":{"id":"Lab/Application Interaction/D-Bus/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud."},"Lab/Application Interaction/D-Bus/content/overview":{"id":"Lab/Application Interaction/D-Bus/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact."},"Lab/Application Interaction/D-Bus/content/password-cracker":{"id":"Lab/Application Interaction/D-Bus/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."},"Lab/Application Interaction/D-Bus/content/time-server":{"id":"Lab/Application Interaction/D-Bus/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c."},"Lab/Application Interaction/D-Bus/content/x-window-system":{"id":"Lab/Application Interaction/D-Bus/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System."},"Lab/Application Interaction/D-Bus/quiz/time-server":{"id":"Lab/Application Interaction/D-Bus/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/D-Bus/quiz/time-server-interop":{"id":"Lab/Application Interaction/D-Bus/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Application Interaction/OS Cloud/content/arena":{"id":"Lab/Application Interaction/OS Cloud/content/arena","title":"Arena","description":"D-Bus"},"Lab/Application Interaction/OS Cloud/content/dbus":{"id":"Lab/Application Interaction/OS Cloud/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux."},"Lab/Application Interaction/OS Cloud/content/os-cloud":{"id":"Lab/Application Interaction/OS Cloud/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud.","sidebar":"sidebar"},"Lab/Application Interaction/OS Cloud/content/overview":{"id":"Lab/Application Interaction/OS Cloud/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact."},"Lab/Application Interaction/OS Cloud/content/password-cracker":{"id":"Lab/Application Interaction/OS Cloud/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."},"Lab/Application Interaction/OS Cloud/content/time-server":{"id":"Lab/Application Interaction/OS Cloud/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c."},"Lab/Application Interaction/OS Cloud/content/x-window-system":{"id":"Lab/Application Interaction/OS Cloud/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System."},"Lab/Application Interaction/OS Cloud/quiz/time-server":{"id":"Lab/Application Interaction/OS Cloud/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/OS Cloud/quiz/time-server-interop":{"id":"Lab/Application Interaction/OS Cloud/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Application Interaction/Overview/content/arena":{"id":"Lab/Application Interaction/Overview/content/arena","title":"Arena","description":"D-Bus"},"Lab/Application Interaction/Overview/content/dbus":{"id":"Lab/Application Interaction/Overview/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux."},"Lab/Application Interaction/Overview/content/os-cloud":{"id":"Lab/Application Interaction/Overview/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud."},"Lab/Application Interaction/Overview/content/overview":{"id":"Lab/Application Interaction/Overview/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact.","sidebar":"sidebar"},"Lab/Application Interaction/Overview/content/password-cracker":{"id":"Lab/Application Interaction/Overview/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."},"Lab/Application Interaction/Overview/content/time-server":{"id":"Lab/Application Interaction/Overview/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c."},"Lab/Application Interaction/Overview/content/x-window-system":{"id":"Lab/Application Interaction/Overview/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System."},"Lab/Application Interaction/Overview/quiz/time-server":{"id":"Lab/Application Interaction/Overview/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/Overview/quiz/time-server-interop":{"id":"Lab/Application Interaction/Overview/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Application Interaction/Password Cracker/content/arena":{"id":"Lab/Application Interaction/Password Cracker/content/arena","title":"Arena","description":"D-Bus"},"Lab/Application Interaction/Password Cracker/content/dbus":{"id":"Lab/Application Interaction/Password Cracker/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux."},"Lab/Application Interaction/Password Cracker/content/os-cloud":{"id":"Lab/Application Interaction/Password Cracker/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud."},"Lab/Application Interaction/Password Cracker/content/overview":{"id":"Lab/Application Interaction/Password Cracker/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact."},"Lab/Application Interaction/Password Cracker/content/password-cracker":{"id":"Lab/Application Interaction/Password Cracker/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash.","sidebar":"sidebar"},"Lab/Application Interaction/Password Cracker/content/time-server":{"id":"Lab/Application Interaction/Password Cracker/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c."},"Lab/Application Interaction/Password Cracker/content/x-window-system":{"id":"Lab/Application Interaction/Password Cracker/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System."},"Lab/Application Interaction/Password Cracker/quiz/time-server":{"id":"Lab/Application Interaction/Password Cracker/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/Password Cracker/quiz/time-server-interop":{"id":"Lab/Application Interaction/Password Cracker/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Application Interaction/The X Window System/content/arena":{"id":"Lab/Application Interaction/The X Window System/content/arena","title":"Arena","description":"D-Bus"},"Lab/Application Interaction/The X Window System/content/dbus":{"id":"Lab/Application Interaction/The X Window System/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux."},"Lab/Application Interaction/The X Window System/content/os-cloud":{"id":"Lab/Application Interaction/The X Window System/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud."},"Lab/Application Interaction/The X Window System/content/overview":{"id":"Lab/Application Interaction/The X Window System/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact."},"Lab/Application Interaction/The X Window System/content/password-cracker":{"id":"Lab/Application Interaction/The X Window System/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."},"Lab/Application Interaction/The X Window System/content/time-server":{"id":"Lab/Application Interaction/The X Window System/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c."},"Lab/Application Interaction/The X Window System/content/x-window-system":{"id":"Lab/Application Interaction/The X Window System/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System.","sidebar":"sidebar"},"Lab/Application Interaction/The X Window System/quiz/time-server":{"id":"Lab/Application Interaction/The X Window System/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/The X Window System/quiz/time-server-interop":{"id":"Lab/Application Interaction/The X Window System/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Application Interaction/Time Server/content/arena":{"id":"Lab/Application Interaction/Time Server/content/arena","title":"Arena","description":"D-Bus"},"Lab/Application Interaction/Time Server/content/dbus":{"id":"Lab/Application Interaction/Time Server/content/dbus","title":"D-Bus","description":"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux."},"Lab/Application Interaction/Time Server/content/os-cloud":{"id":"Lab/Application Interaction/Time Server/content/os-cloud","title":"OS Cloud","description":"In this section we are going to build a \\"toy cloud\\" called OS Cloud."},"Lab/Application Interaction/Time Server/content/overview":{"id":"Lab/Application Interaction/Time Server/content/overview","title":"Application Interaction","description":"In this chapter you will discover various mechanisms through which applications on a system can interact."},"Lab/Application Interaction/Time Server/content/password-cracker":{"id":"Lab/Application Interaction/Time Server/content/password-cracker","title":"Password Cracker","description":"In this example we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."},"Lab/Application Interaction/Time Server/content/time-server":{"id":"Lab/Application Interaction/Time Server/content/time-server","title":"Time Server","description":"Check out the code in support/time-server/server.c and support/time-server/client.c.","sidebar":"sidebar"},"Lab/Application Interaction/Time Server/content/x-window-system":{"id":"Lab/Application Interaction/Time Server/content/x-window-system","title":"The X Window System","description":"Unix-like systems that support a Graphical User Interface usually do this through the X Window System."},"Lab/Application Interaction/Time Server/quiz/time-server":{"id":"Lab/Application Interaction/Time Server/quiz/time-server","title":"Time Server Protocol","description":"Question Text"},"Lab/Application Interaction/Time Server/quiz/time-server-interop":{"id":"Lab/Application Interaction/Time Server/quiz/time-server-interop","title":"Time Server Interoperability","description":"Question Text"},"Lab/Compute/Arena/content/arena":{"id":"Lab/Compute/Arena/content/arena","title":"Arena","description":"Threads and Processes: clone","sidebar":"sidebar"},"Lab/Compute/Arena/content/copy-on-write":{"id":"Lab/Compute/Arena/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Arena/content/hardware-perspective":{"id":"Lab/Compute/Arena/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Arena/content/overview":{"id":"Lab/Compute/Arena/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Arena/content/processes":{"id":"Lab/Compute/Arena/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Arena/content/processes-threads-apache2":{"id":"Lab/Compute/Arena/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Arena/content/scheduling":{"id":"Lab/Compute/Arena/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Arena/content/synchronization":{"id":"Lab/Compute/Arena/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Arena/content/threads":{"id":"Lab/Compute/Arena/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Arena/quiz/apache2-strace":{"id":"Lab/Compute/Arena/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Arena/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Arena/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Arena/quiz/child-faults-after-write":{"id":"Lab/Compute/Arena/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Arena/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Arena/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Arena/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Arena/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Arena/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Arena/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Arena/quiz/mmap-cow-flag":{"id":"Lab/Compute/Arena/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Arena/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Arena/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Arena/quiz/number-of-running-ults":{"id":"Lab/Compute/Arena/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Arena/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Arena/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Arena/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Arena/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Arena/quiz/processes-speedup":{"id":"Lab/Compute/Arena/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Arena/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Arena/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Arena/quiz/semaphore-equivalent":{"id":"Lab/Compute/Arena/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Arena/quiz/state-of-new-ult":{"id":"Lab/Compute/Arena/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Arena/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Arena/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Arena/quiz/thread-memory":{"id":"Lab/Compute/Arena/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Arena/quiz/time-slice-value":{"id":"Lab/Compute/Arena/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Arena/quiz/tls-synchronization":{"id":"Lab/Compute/Arena/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Arena/quiz/tls-var-copies":{"id":"Lab/Compute/Arena/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Arena/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Arena/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Arena/quiz/ult-thread-ids":{"id":"Lab/Compute/Arena/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Arena/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Arena/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Arena/quiz/why-use-completed-queue":{"id":"Lab/Compute/Arena/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Copy-on-Write/content/arena":{"id":"Lab/Compute/Copy-on-Write/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Copy-on-Write/content/copy-on-write":{"id":"Lab/Compute/Copy-on-Write/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces.","sidebar":"sidebar"},"Lab/Compute/Copy-on-Write/content/hardware-perspective":{"id":"Lab/Compute/Copy-on-Write/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Copy-on-Write/content/overview":{"id":"Lab/Compute/Copy-on-Write/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Copy-on-Write/content/processes":{"id":"Lab/Compute/Copy-on-Write/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Copy-on-Write/content/processes-threads-apache2":{"id":"Lab/Compute/Copy-on-Write/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Copy-on-Write/content/scheduling":{"id":"Lab/Compute/Copy-on-Write/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Copy-on-Write/content/synchronization":{"id":"Lab/Compute/Copy-on-Write/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Copy-on-Write/content/threads":{"id":"Lab/Compute/Copy-on-Write/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Copy-on-Write/quiz/apache2-strace":{"id":"Lab/Compute/Copy-on-Write/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Copy-on-Write/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/child-faults-after-write":{"id":"Lab/Compute/Copy-on-Write/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Copy-on-Write/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Copy-on-Write/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Copy-on-Write/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/mmap-cow-flag":{"id":"Lab/Compute/Copy-on-Write/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Copy-on-Write/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/number-of-running-ults":{"id":"Lab/Compute/Copy-on-Write/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Copy-on-Write/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Copy-on-Write/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/processes-speedup":{"id":"Lab/Compute/Copy-on-Write/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Copy-on-Write/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/semaphore-equivalent":{"id":"Lab/Compute/Copy-on-Write/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/state-of-new-ult":{"id":"Lab/Compute/Copy-on-Write/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Copy-on-Write/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/thread-memory":{"id":"Lab/Compute/Copy-on-Write/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/time-slice-value":{"id":"Lab/Compute/Copy-on-Write/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/tls-synchronization":{"id":"Lab/Compute/Copy-on-Write/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/tls-var-copies":{"id":"Lab/Compute/Copy-on-Write/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Copy-on-Write/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/ult-thread-ids":{"id":"Lab/Compute/Copy-on-Write/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Copy-on-Write/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Copy-on-Write/quiz/why-use-completed-queue":{"id":"Lab/Compute/Copy-on-Write/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Hardware Perspective/content/arena":{"id":"Lab/Compute/Hardware Perspective/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Hardware Perspective/content/copy-on-write":{"id":"Lab/Compute/Hardware Perspective/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Hardware Perspective/content/hardware-perspective":{"id":"Lab/Compute/Hardware Perspective/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math.","sidebar":"sidebar"},"Lab/Compute/Hardware Perspective/content/overview":{"id":"Lab/Compute/Hardware Perspective/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Hardware Perspective/content/processes":{"id":"Lab/Compute/Hardware Perspective/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Hardware Perspective/content/processes-threads-apache2":{"id":"Lab/Compute/Hardware Perspective/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Hardware Perspective/content/scheduling":{"id":"Lab/Compute/Hardware Perspective/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Hardware Perspective/content/synchronization":{"id":"Lab/Compute/Hardware Perspective/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Hardware Perspective/content/threads":{"id":"Lab/Compute/Hardware Perspective/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Hardware Perspective/quiz/apache2-strace":{"id":"Lab/Compute/Hardware Perspective/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Hardware Perspective/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/child-faults-after-write":{"id":"Lab/Compute/Hardware Perspective/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Hardware Perspective/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Hardware Perspective/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Hardware Perspective/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/mmap-cow-flag":{"id":"Lab/Compute/Hardware Perspective/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Hardware Perspective/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/number-of-running-ults":{"id":"Lab/Compute/Hardware Perspective/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Hardware Perspective/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Hardware Perspective/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/processes-speedup":{"id":"Lab/Compute/Hardware Perspective/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Hardware Perspective/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/semaphore-equivalent":{"id":"Lab/Compute/Hardware Perspective/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/state-of-new-ult":{"id":"Lab/Compute/Hardware Perspective/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Hardware Perspective/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/thread-memory":{"id":"Lab/Compute/Hardware Perspective/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/time-slice-value":{"id":"Lab/Compute/Hardware Perspective/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/tls-synchronization":{"id":"Lab/Compute/Hardware Perspective/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/tls-var-copies":{"id":"Lab/Compute/Hardware Perspective/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Hardware Perspective/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/ult-thread-ids":{"id":"Lab/Compute/Hardware Perspective/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Hardware Perspective/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Hardware Perspective/quiz/why-use-completed-queue":{"id":"Lab/Compute/Hardware Perspective/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Overview/content/arena":{"id":"Lab/Compute/Overview/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Overview/content/copy-on-write":{"id":"Lab/Compute/Overview/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Overview/content/hardware-perspective":{"id":"Lab/Compute/Overview/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Overview/content/overview":{"id":"Lab/Compute/Overview/content/overview","title":"Compute","description":"Contents","sidebar":"sidebar"},"Lab/Compute/Overview/content/processes":{"id":"Lab/Compute/Overview/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Overview/content/processes-threads-apache2":{"id":"Lab/Compute/Overview/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Overview/content/scheduling":{"id":"Lab/Compute/Overview/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Overview/content/synchronization":{"id":"Lab/Compute/Overview/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Overview/content/threads":{"id":"Lab/Compute/Overview/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Overview/quiz/apache2-strace":{"id":"Lab/Compute/Overview/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Overview/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Overview/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Overview/quiz/child-faults-after-write":{"id":"Lab/Compute/Overview/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Overview/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Overview/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Overview/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Overview/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Overview/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Overview/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Overview/quiz/mmap-cow-flag":{"id":"Lab/Compute/Overview/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Overview/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Overview/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Overview/quiz/number-of-running-ults":{"id":"Lab/Compute/Overview/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Overview/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Overview/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Overview/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Overview/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Overview/quiz/processes-speedup":{"id":"Lab/Compute/Overview/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Overview/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Overview/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Overview/quiz/semaphore-equivalent":{"id":"Lab/Compute/Overview/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Overview/quiz/state-of-new-ult":{"id":"Lab/Compute/Overview/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Overview/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Overview/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Overview/quiz/thread-memory":{"id":"Lab/Compute/Overview/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Overview/quiz/time-slice-value":{"id":"Lab/Compute/Overview/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Overview/quiz/tls-synchronization":{"id":"Lab/Compute/Overview/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Overview/quiz/tls-var-copies":{"id":"Lab/Compute/Overview/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Overview/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Overview/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Overview/quiz/ult-thread-ids":{"id":"Lab/Compute/Overview/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Overview/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Overview/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Overview/quiz/why-use-completed-queue":{"id":"Lab/Compute/Overview/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/content/arena":{"id":"Lab/Compute/Processes-threads-apache2/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Processes-threads-apache2/content/copy-on-write":{"id":"Lab/Compute/Processes-threads-apache2/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Processes-threads-apache2/content/hardware-perspective":{"id":"Lab/Compute/Processes-threads-apache2/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Processes-threads-apache2/content/overview":{"id":"Lab/Compute/Processes-threads-apache2/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Processes-threads-apache2/content/processes":{"id":"Lab/Compute/Processes-threads-apache2/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Processes-threads-apache2/content/processes-threads-apache2":{"id":"Lab/Compute/Processes-threads-apache2/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads.","sidebar":"sidebar"},"Lab/Compute/Processes-threads-apache2/content/scheduling":{"id":"Lab/Compute/Processes-threads-apache2/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Processes-threads-apache2/content/synchronization":{"id":"Lab/Compute/Processes-threads-apache2/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Processes-threads-apache2/content/threads":{"id":"Lab/Compute/Processes-threads-apache2/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Processes-threads-apache2/quiz/apache2-strace":{"id":"Lab/Compute/Processes-threads-apache2/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Processes-threads-apache2/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/child-faults-after-write":{"id":"Lab/Compute/Processes-threads-apache2/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Processes-threads-apache2/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Processes-threads-apache2/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Processes-threads-apache2/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/mmap-cow-flag":{"id":"Lab/Compute/Processes-threads-apache2/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Processes-threads-apache2/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/number-of-running-ults":{"id":"Lab/Compute/Processes-threads-apache2/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Processes-threads-apache2/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Processes-threads-apache2/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/processes-speedup":{"id":"Lab/Compute/Processes-threads-apache2/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Processes-threads-apache2/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/semaphore-equivalent":{"id":"Lab/Compute/Processes-threads-apache2/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/state-of-new-ult":{"id":"Lab/Compute/Processes-threads-apache2/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Processes-threads-apache2/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/thread-memory":{"id":"Lab/Compute/Processes-threads-apache2/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/time-slice-value":{"id":"Lab/Compute/Processes-threads-apache2/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/tls-synchronization":{"id":"Lab/Compute/Processes-threads-apache2/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/tls-var-copies":{"id":"Lab/Compute/Processes-threads-apache2/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Processes-threads-apache2/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/ult-thread-ids":{"id":"Lab/Compute/Processes-threads-apache2/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Processes-threads-apache2/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Processes-threads-apache2/quiz/why-use-completed-queue":{"id":"Lab/Compute/Processes-threads-apache2/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Processes/content/arena":{"id":"Lab/Compute/Processes/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Processes/content/copy-on-write":{"id":"Lab/Compute/Processes/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Processes/content/hardware-perspective":{"id":"Lab/Compute/Processes/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Processes/content/overview":{"id":"Lab/Compute/Processes/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Processes/content/processes":{"id":"Lab/Compute/Processes/content/processes","title":"Processes","description":"A process is simply a running program.","sidebar":"sidebar"},"Lab/Compute/Processes/content/processes-threads-apache2":{"id":"Lab/Compute/Processes/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Processes/content/scheduling":{"id":"Lab/Compute/Processes/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Processes/content/synchronization":{"id":"Lab/Compute/Processes/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Processes/content/threads":{"id":"Lab/Compute/Processes/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Processes/quiz/apache2-strace":{"id":"Lab/Compute/Processes/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Processes/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Processes/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Processes/quiz/child-faults-after-write":{"id":"Lab/Compute/Processes/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Processes/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Processes/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Processes/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Processes/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Processes/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Processes/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Processes/quiz/mmap-cow-flag":{"id":"Lab/Compute/Processes/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Processes/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Processes/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Processes/quiz/number-of-running-ults":{"id":"Lab/Compute/Processes/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Processes/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Processes/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Processes/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Processes/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Processes/quiz/processes-speedup":{"id":"Lab/Compute/Processes/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Processes/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Processes/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Processes/quiz/semaphore-equivalent":{"id":"Lab/Compute/Processes/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Processes/quiz/state-of-new-ult":{"id":"Lab/Compute/Processes/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Processes/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Processes/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Processes/quiz/thread-memory":{"id":"Lab/Compute/Processes/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Processes/quiz/time-slice-value":{"id":"Lab/Compute/Processes/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Processes/quiz/tls-synchronization":{"id":"Lab/Compute/Processes/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Processes/quiz/tls-var-copies":{"id":"Lab/Compute/Processes/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Processes/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Processes/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Processes/quiz/ult-thread-ids":{"id":"Lab/Compute/Processes/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Processes/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Processes/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Processes/quiz/why-use-completed-queue":{"id":"Lab/Compute/Processes/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Scheduling/content/arena":{"id":"Lab/Compute/Scheduling/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Scheduling/content/copy-on-write":{"id":"Lab/Compute/Scheduling/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Scheduling/content/hardware-perspective":{"id":"Lab/Compute/Scheduling/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Scheduling/content/overview":{"id":"Lab/Compute/Scheduling/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Scheduling/content/processes":{"id":"Lab/Compute/Scheduling/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Scheduling/content/processes-threads-apache2":{"id":"Lab/Compute/Scheduling/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Scheduling/content/scheduling":{"id":"Lab/Compute/Scheduling/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time.","sidebar":"sidebar"},"Lab/Compute/Scheduling/content/synchronization":{"id":"Lab/Compute/Scheduling/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Scheduling/content/threads":{"id":"Lab/Compute/Scheduling/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Scheduling/quiz/apache2-strace":{"id":"Lab/Compute/Scheduling/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Scheduling/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Scheduling/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Scheduling/quiz/child-faults-after-write":{"id":"Lab/Compute/Scheduling/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Scheduling/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Scheduling/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Scheduling/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Scheduling/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Scheduling/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Scheduling/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Scheduling/quiz/mmap-cow-flag":{"id":"Lab/Compute/Scheduling/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Scheduling/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Scheduling/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Scheduling/quiz/number-of-running-ults":{"id":"Lab/Compute/Scheduling/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Scheduling/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Scheduling/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Scheduling/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Scheduling/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Scheduling/quiz/processes-speedup":{"id":"Lab/Compute/Scheduling/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Scheduling/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Scheduling/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Scheduling/quiz/semaphore-equivalent":{"id":"Lab/Compute/Scheduling/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Scheduling/quiz/state-of-new-ult":{"id":"Lab/Compute/Scheduling/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Scheduling/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Scheduling/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Scheduling/quiz/thread-memory":{"id":"Lab/Compute/Scheduling/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Scheduling/quiz/time-slice-value":{"id":"Lab/Compute/Scheduling/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Scheduling/quiz/tls-synchronization":{"id":"Lab/Compute/Scheduling/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Scheduling/quiz/tls-var-copies":{"id":"Lab/Compute/Scheduling/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Scheduling/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Scheduling/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Scheduling/quiz/ult-thread-ids":{"id":"Lab/Compute/Scheduling/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Scheduling/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Scheduling/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Scheduling/quiz/why-use-completed-queue":{"id":"Lab/Compute/Scheduling/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Synchronization/content/arena":{"id":"Lab/Compute/Synchronization/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Synchronization/content/copy-on-write":{"id":"Lab/Compute/Synchronization/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Synchronization/content/hardware-perspective":{"id":"Lab/Compute/Synchronization/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Synchronization/content/overview":{"id":"Lab/Compute/Synchronization/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Synchronization/content/processes":{"id":"Lab/Compute/Synchronization/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Synchronization/content/processes-threads-apache2":{"id":"Lab/Compute/Synchronization/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Synchronization/content/scheduling":{"id":"Lab/Compute/Synchronization/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Synchronization/content/synchronization":{"id":"Lab/Compute/Synchronization/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data.","sidebar":"sidebar"},"Lab/Compute/Synchronization/content/threads":{"id":"Lab/Compute/Synchronization/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads"},"Lab/Compute/Synchronization/quiz/apache2-strace":{"id":"Lab/Compute/Synchronization/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Synchronization/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Synchronization/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Synchronization/quiz/child-faults-after-write":{"id":"Lab/Compute/Synchronization/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Synchronization/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Synchronization/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Synchronization/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Synchronization/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Synchronization/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Synchronization/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Synchronization/quiz/mmap-cow-flag":{"id":"Lab/Compute/Synchronization/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Synchronization/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Synchronization/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Synchronization/quiz/number-of-running-ults":{"id":"Lab/Compute/Synchronization/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Synchronization/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Synchronization/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Synchronization/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Synchronization/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Synchronization/quiz/processes-speedup":{"id":"Lab/Compute/Synchronization/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Synchronization/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Synchronization/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Synchronization/quiz/semaphore-equivalent":{"id":"Lab/Compute/Synchronization/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Synchronization/quiz/state-of-new-ult":{"id":"Lab/Compute/Synchronization/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Synchronization/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Synchronization/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Synchronization/quiz/thread-memory":{"id":"Lab/Compute/Synchronization/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Synchronization/quiz/time-slice-value":{"id":"Lab/Compute/Synchronization/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Synchronization/quiz/tls-synchronization":{"id":"Lab/Compute/Synchronization/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Synchronization/quiz/tls-var-copies":{"id":"Lab/Compute/Synchronization/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Synchronization/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Synchronization/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Synchronization/quiz/ult-thread-ids":{"id":"Lab/Compute/Synchronization/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Synchronization/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Synchronization/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Synchronization/quiz/why-use-completed-queue":{"id":"Lab/Compute/Synchronization/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Compute/Threads/content/arena":{"id":"Lab/Compute/Threads/content/arena","title":"Arena","description":"Threads and Processes: clone"},"Lab/Compute/Threads/content/copy-on-write":{"id":"Lab/Compute/Threads/content/copy-on-write","title":"Copy-on-Write","description":"So far you know that the parent and child process have separate virtual address spaces."},"Lab/Compute/Threads/content/hardware-perspective":{"id":"Lab/Compute/Threads/content/hardware-perspective","title":"Hardware Perspective","description":"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math."},"Lab/Compute/Threads/content/overview":{"id":"Lab/Compute/Threads/content/overview","title":"Compute","description":"Contents"},"Lab/Compute/Threads/content/processes":{"id":"Lab/Compute/Threads/content/processes","title":"Processes","description":"A process is simply a running program."},"Lab/Compute/Threads/content/processes-threads-apache2":{"id":"Lab/Compute/Threads/content/processes-threads-apache2","title":"Usage of Processes and Threads in `apache2`","description":"We\'ll take a look at how a real-world application - the apache2 HTTP server - makes use of processes and threads."},"Lab/Compute/Threads/content/scheduling":{"id":"Lab/Compute/Threads/content/scheduling","title":"Scheduling","description":"Up to now we know that the OS decides which thread (not process) runs on each CPU core at each time."},"Lab/Compute/Threads/content/synchronization":{"id":"Lab/Compute/Threads/content/synchronization","title":"Synchronization","description":"So far we\'ve used threads and processes without wondering how to \\"tell\\" them how to access shared data."},"Lab/Compute/Threads/content/threads":{"id":"Lab/Compute/Threads/content/threads","title":"Threads","description":"Spreading the Work Among Other Threads","sidebar":"sidebar"},"Lab/Compute/Threads/quiz/apache2-strace":{"id":"Lab/Compute/Threads/quiz/apache2-strace","title":"`apache2` Document Root","description":"Question Text"},"Lab/Compute/Threads/quiz/cause-of-file-not-found-error":{"id":"Lab/Compute/Threads/quiz/cause-of-file-not-found-error","title":"Cause of `FileNotFoundError`","description":"Question Text"},"Lab/Compute/Threads/quiz/child-faults-after-write":{"id":"Lab/Compute/Threads/quiz/child-faults-after-write","title":"Child Faults After Write","description":"Question Text"},"Lab/Compute/Threads/quiz/coarse-vs-granular-critical-section":{"id":"Lab/Compute/Threads/quiz/coarse-vs-granular-critical-section","title":"Coarse vs Granular Critical Section","description":"Question Text"},"Lab/Compute/Threads/quiz/create-sleepy-process-ending":{"id":"Lab/Compute/Threads/quiz/create-sleepy-process-ending","title":"`create_sleepy` Process Ending","description":"Question Text"},"Lab/Compute/Threads/quiz/mini-shell-stops-after-command":{"id":"Lab/Compute/Threads/quiz/mini-shell-stops-after-command","title":"Mini-shell Stops After Command","description":"Question Text"},"Lab/Compute/Threads/quiz/mmap-cow-flag":{"id":"Lab/Compute/Threads/quiz/mmap-cow-flag","title":"Copy-on-write Flag for `mmap()`","description":"Question Text"},"Lab/Compute/Threads/quiz/notify-only-with-mutex":{"id":"Lab/Compute/Threads/quiz/notify-only-with-mutex","title":"Both Condition and Mutex","description":"Question Text"},"Lab/Compute/Threads/quiz/number-of-running-ults":{"id":"Lab/Compute/Threads/quiz/number-of-running-ults","title":"Number of RUNNING User-Level Threads","description":"Question Text"},"Lab/Compute/Threads/quiz/parent-faults-before-fork":{"id":"Lab/Compute/Threads/quiz/parent-faults-before-fork","title":"Parent Faults before `fork()`","description":"Question Text"},"Lab/Compute/Threads/quiz/parent-of-sleep-processes":{"id":"Lab/Compute/Threads/quiz/parent-of-sleep-processes","title":"Parent of `sleep` Processes","description":"Question Text"},"Lab/Compute/Threads/quiz/processes-speedup":{"id":"Lab/Compute/Threads/quiz/processes-speedup","title":"Processes Speedup","description":"Question Text"},"Lab/Compute/Threads/quiz/seg-fault-exit-code":{"id":"Lab/Compute/Threads/quiz/seg-fault-exit-code","title":"Seg Fault Exit Code","description":"Question Text"},"Lab/Compute/Threads/quiz/semaphore-equivalent":{"id":"Lab/Compute/Threads/quiz/semaphore-equivalent","title":"Semaphore Equivalent","description":"Question Text"},"Lab/Compute/Threads/quiz/state-of-new-ult":{"id":"Lab/Compute/Threads/quiz/state-of-new-ult","title":"State of new ULT","description":"Question Text"},"Lab/Compute/Threads/quiz/tcb-libult-unikraft":{"id":"Lab/Compute/Threads/quiz/tcb-libult-unikraft","title":"Similarities Between the TCBs of `libult` and Unikraft","description":"Question Text"},"Lab/Compute/Threads/quiz/thread-memory":{"id":"Lab/Compute/Threads/quiz/thread-memory","title":"Thread Memory","description":"Question Text"},"Lab/Compute/Threads/quiz/time-slice-value":{"id":"Lab/Compute/Threads/quiz/time-slice-value","title":"Time Slice Value","description":"Question Text"},"Lab/Compute/Threads/quiz/tls-synchronization":{"id":"Lab/Compute/Threads/quiz/tls-synchronization","title":"TLS Synchronization","description":"Question Text"},"Lab/Compute/Threads/quiz/tls-var-copies":{"id":"Lab/Compute/Threads/quiz/tls-var-copies","title":"TLS `var` Copies","description":"Question Text"},"Lab/Compute/Threads/quiz/type-of-scheduler-in-libult":{"id":"Lab/Compute/Threads/quiz/type-of-scheduler-in-libult","title":"Type of Scheduler in `libult.so`","description":"Question Text"},"Lab/Compute/Threads/quiz/ult-thread-ids":{"id":"Lab/Compute/Threads/quiz/ult-thread-ids","title":"ULT Thread IDs","description":"Question Text"},"Lab/Compute/Threads/quiz/who-calls-execve-parent":{"id":"Lab/Compute/Threads/quiz/who-calls-execve-parent","title":"Who Calls `execve` in the Log of the Parent Process?","description":"Question Text"},"Lab/Compute/Threads/quiz/why-use-completed-queue":{"id":"Lab/Compute/Threads/quiz/why-use-completed-queue","title":"The Need for a COMPLETED Queue","description":"Question Text"},"Lab/Data/Arena/content/arena":{"id":"Lab/Data/Arena/content/arena","title":"Arena","description":"Challenge tasks","sidebar":"sidebar"},"Lab/Data/Arena/content/investigate-memory":{"id":"Lab/Data/Arena/content/investigate-memory","title":"Investigate Memory Actions","description":"Memory actions generally mean:"},"Lab/Data/Arena/content/memory-security":{"id":"Lab/Data/Arena/content/memory-security","title":"Memory Security","description":"Memory security is one of the most important aspects in today\'s computer systems."},"Lab/Data/Arena/content/overview":{"id":"Lab/Data/Arena/content/overview","title":"Data","description":"Data represents information that is to be processed to produce a final result or more data."},"Lab/Data/Arena/content/process-memory":{"id":"Lab/Data/Arena/content/process-memory","title":"Process Memory","description":"Memory Regions"},"Lab/Data/Arena/content/working-memory":{"id":"Lab/Data/Arena/content/working-memory","title":"Working with Memory","description":"As previously stated, from a programmer\'s perspective, memory is abstracted into variables."},"Lab/Data/Arena/quiz/bypass-canary":{"id":"Lab/Data/Arena/quiz/bypass-canary","title":"Bypass Canary","description":"Question"},"Lab/Data/Arena/quiz/half-page":{"id":"Lab/Data/Arena/quiz/half-page","title":"Half Page","description":"Question Text"},"Lab/Data/Arena/quiz/malloc-brk":{"id":"Lab/Data/Arena/quiz/malloc-brk","title":"Malloc `brk()`","description":"Question Text"},"Lab/Data/Arena/quiz/malloc-mmap":{"id":"Lab/Data/Arena/quiz/malloc-mmap","title":"Malloc `mmap()`","description":"Question Text"},"Lab/Data/Arena/quiz/memory-access":{"id":"Lab/Data/Arena/quiz/memory-access","title":"Modify String","description":"Question Text"},"Lab/Data/Arena/quiz/memory-aslr":{"id":"Lab/Data/Arena/quiz/memory-aslr","title":"ASLR","description":"Question Text"},"Lab/Data/Arena/quiz/memory-granularity":{"id":"Lab/Data/Arena/quiz/memory-granularity","title":"Memory Granularity","description":"Question Text"},"Lab/Data/Arena/quiz/memory-leaks":{"id":"Lab/Data/Arena/quiz/memory-leaks","title":"Memory Leaks","description":"Question Text"},"Lab/Data/Arena/quiz/memory-regions-vars":{"id":"Lab/Data/Arena/quiz/memory-regions-vars","title":"Variables in memory regions","description":"Question Text"},"Lab/Data/Arena/quiz/memory-stack-protector":{"id":"Lab/Data/Arena/quiz/memory-stack-protector","title":"Stack Protector","description":"Question Text"},"Lab/Data/Arena/quiz/mmap-file":{"id":"Lab/Data/Arena/quiz/mmap-file","title":"`mmap()` file","description":"Question Text"},"Lab/Data/Arena/quiz/operators":{"id":"Lab/Data/Arena/quiz/operators","title":"Operator Overloading","description":"Question Text"},"Lab/Data/Arena/quiz/page-allocation":{"id":"Lab/Data/Arena/quiz/page-allocation","title":"Page Allocation","description":"Question Text"},"Lab/Data/Arena/quiz/stack-layout":{"id":"Lab/Data/Arena/quiz/stack-layout","title":"Stack layout","description":"Question Text"},"Lab/Data/Arena/quiz/string-buff-over":{"id":"Lab/Data/Arena/quiz/string-buff-over","title":"String Buffer Overflow","description":"Question Text"},"Lab/Data/Arena/quiz/string-strcpy":{"id":"Lab/Data/Arena/quiz/string-strcpy","title":"Strcpy Buffer Overflow","description":"Question Text"},"Lab/Data/Arena/quiz/valgrind-leaks":{"id":"Lab/Data/Arena/quiz/valgrind-leaks","title":"Valgrind Leaks","description":"Question Text"},"Lab/Data/Investigate Memory/content/arena":{"id":"Lab/Data/Investigate Memory/content/arena","title":"Arena","description":"Challenge tasks"},"Lab/Data/Investigate Memory/content/investigate-memory":{"id":"Lab/Data/Investigate Memory/content/investigate-memory","title":"Investigate Memory Actions","description":"Memory actions generally mean:","sidebar":"sidebar"},"Lab/Data/Investigate Memory/content/memory-security":{"id":"Lab/Data/Investigate Memory/content/memory-security","title":"Memory Security","description":"Memory security is one of the most important aspects in today\'s computer systems."},"Lab/Data/Investigate Memory/content/overview":{"id":"Lab/Data/Investigate Memory/content/overview","title":"Data","description":"Data represents information that is to be processed to produce a final result or more data."},"Lab/Data/Investigate Memory/content/process-memory":{"id":"Lab/Data/Investigate Memory/content/process-memory","title":"Process Memory","description":"Memory Regions"},"Lab/Data/Investigate Memory/content/working-memory":{"id":"Lab/Data/Investigate Memory/content/working-memory","title":"Working with Memory","description":"As previously stated, from a programmer\'s perspective, memory is abstracted into variables."},"Lab/Data/Investigate Memory/quiz/bypass-canary":{"id":"Lab/Data/Investigate Memory/quiz/bypass-canary","title":"Bypass Canary","description":"Question"},"Lab/Data/Investigate Memory/quiz/half-page":{"id":"Lab/Data/Investigate Memory/quiz/half-page","title":"Half Page","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/malloc-brk":{"id":"Lab/Data/Investigate Memory/quiz/malloc-brk","title":"Malloc `brk()`","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/malloc-mmap":{"id":"Lab/Data/Investigate Memory/quiz/malloc-mmap","title":"Malloc `mmap()`","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/memory-access":{"id":"Lab/Data/Investigate Memory/quiz/memory-access","title":"Modify String","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/memory-aslr":{"id":"Lab/Data/Investigate Memory/quiz/memory-aslr","title":"ASLR","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/memory-granularity":{"id":"Lab/Data/Investigate Memory/quiz/memory-granularity","title":"Memory Granularity","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/memory-leaks":{"id":"Lab/Data/Investigate Memory/quiz/memory-leaks","title":"Memory Leaks","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/memory-regions-vars":{"id":"Lab/Data/Investigate Memory/quiz/memory-regions-vars","title":"Variables in memory regions","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/memory-stack-protector":{"id":"Lab/Data/Investigate Memory/quiz/memory-stack-protector","title":"Stack Protector","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/mmap-file":{"id":"Lab/Data/Investigate Memory/quiz/mmap-file","title":"`mmap()` file","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/operators":{"id":"Lab/Data/Investigate Memory/quiz/operators","title":"Operator Overloading","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/page-allocation":{"id":"Lab/Data/Investigate Memory/quiz/page-allocation","title":"Page Allocation","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/stack-layout":{"id":"Lab/Data/Investigate Memory/quiz/stack-layout","title":"Stack layout","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/string-buff-over":{"id":"Lab/Data/Investigate Memory/quiz/string-buff-over","title":"String Buffer Overflow","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/string-strcpy":{"id":"Lab/Data/Investigate Memory/quiz/string-strcpy","title":"Strcpy Buffer Overflow","description":"Question Text"},"Lab/Data/Investigate Memory/quiz/valgrind-leaks":{"id":"Lab/Data/Investigate Memory/quiz/valgrind-leaks","title":"Valgrind Leaks","description":"Question Text"},"Lab/Data/Memory Security/content/arena":{"id":"Lab/Data/Memory Security/content/arena","title":"Arena","description":"Challenge tasks"},"Lab/Data/Memory Security/content/investigate-memory":{"id":"Lab/Data/Memory Security/content/investigate-memory","title":"Investigate Memory Actions","description":"Memory actions generally mean:"},"Lab/Data/Memory Security/content/memory-security":{"id":"Lab/Data/Memory Security/content/memory-security","title":"Memory Security","description":"Memory security is one of the most important aspects in today\'s computer systems.","sidebar":"sidebar"},"Lab/Data/Memory Security/content/overview":{"id":"Lab/Data/Memory Security/content/overview","title":"Data","description":"Data represents information that is to be processed to produce a final result or more data."},"Lab/Data/Memory Security/content/process-memory":{"id":"Lab/Data/Memory Security/content/process-memory","title":"Process Memory","description":"Memory Regions"},"Lab/Data/Memory Security/content/working-memory":{"id":"Lab/Data/Memory Security/content/working-memory","title":"Working with Memory","description":"As previously stated, from a programmer\'s perspective, memory is abstracted into variables."},"Lab/Data/Memory Security/quiz/bypass-canary":{"id":"Lab/Data/Memory Security/quiz/bypass-canary","title":"Bypass Canary","description":"Question"},"Lab/Data/Memory Security/quiz/half-page":{"id":"Lab/Data/Memory Security/quiz/half-page","title":"Half Page","description":"Question Text"},"Lab/Data/Memory Security/quiz/malloc-brk":{"id":"Lab/Data/Memory Security/quiz/malloc-brk","title":"Malloc `brk()`","description":"Question Text"},"Lab/Data/Memory Security/quiz/malloc-mmap":{"id":"Lab/Data/Memory Security/quiz/malloc-mmap","title":"Malloc `mmap()`","description":"Question Text"},"Lab/Data/Memory Security/quiz/memory-access":{"id":"Lab/Data/Memory Security/quiz/memory-access","title":"Modify String","description":"Question Text"},"Lab/Data/Memory Security/quiz/memory-aslr":{"id":"Lab/Data/Memory Security/quiz/memory-aslr","title":"ASLR","description":"Question Text"},"Lab/Data/Memory Security/quiz/memory-granularity":{"id":"Lab/Data/Memory Security/quiz/memory-granularity","title":"Memory Granularity","description":"Question Text"},"Lab/Data/Memory Security/quiz/memory-leaks":{"id":"Lab/Data/Memory Security/quiz/memory-leaks","title":"Memory Leaks","description":"Question Text"},"Lab/Data/Memory Security/quiz/memory-regions-vars":{"id":"Lab/Data/Memory Security/quiz/memory-regions-vars","title":"Variables in memory regions","description":"Question Text"},"Lab/Data/Memory Security/quiz/memory-stack-protector":{"id":"Lab/Data/Memory Security/quiz/memory-stack-protector","title":"Stack Protector","description":"Question Text"},"Lab/Data/Memory Security/quiz/mmap-file":{"id":"Lab/Data/Memory Security/quiz/mmap-file","title":"`mmap()` file","description":"Question Text"},"Lab/Data/Memory Security/quiz/operators":{"id":"Lab/Data/Memory Security/quiz/operators","title":"Operator Overloading","description":"Question Text"},"Lab/Data/Memory Security/quiz/page-allocation":{"id":"Lab/Data/Memory Security/quiz/page-allocation","title":"Page Allocation","description":"Question Text"},"Lab/Data/Memory Security/quiz/stack-layout":{"id":"Lab/Data/Memory Security/quiz/stack-layout","title":"Stack layout","description":"Question Text"},"Lab/Data/Memory Security/quiz/string-buff-over":{"id":"Lab/Data/Memory Security/quiz/string-buff-over","title":"String Buffer Overflow","description":"Question Text"},"Lab/Data/Memory Security/quiz/string-strcpy":{"id":"Lab/Data/Memory Security/quiz/string-strcpy","title":"Strcpy Buffer Overflow","description":"Question Text"},"Lab/Data/Memory Security/quiz/valgrind-leaks":{"id":"Lab/Data/Memory Security/quiz/valgrind-leaks","title":"Valgrind Leaks","description":"Question Text"},"Lab/Data/Overview/content/arena":{"id":"Lab/Data/Overview/content/arena","title":"Arena","description":"Challenge tasks"},"Lab/Data/Overview/content/investigate-memory":{"id":"Lab/Data/Overview/content/investigate-memory","title":"Investigate Memory Actions","description":"Memory actions generally mean:"},"Lab/Data/Overview/content/memory-security":{"id":"Lab/Data/Overview/content/memory-security","title":"Memory Security","description":"Memory security is one of the most important aspects in today\'s computer systems."},"Lab/Data/Overview/content/overview":{"id":"Lab/Data/Overview/content/overview","title":"Data","description":"Data represents information that is to be processed to produce a final result or more data.","sidebar":"sidebar"},"Lab/Data/Overview/content/process-memory":{"id":"Lab/Data/Overview/content/process-memory","title":"Process Memory","description":"Memory Regions"},"Lab/Data/Overview/content/working-memory":{"id":"Lab/Data/Overview/content/working-memory","title":"Working with Memory","description":"As previously stated, from a programmer\'s perspective, memory is abstracted into variables."},"Lab/Data/Overview/quiz/bypass-canary":{"id":"Lab/Data/Overview/quiz/bypass-canary","title":"Bypass Canary","description":"Question"},"Lab/Data/Overview/quiz/half-page":{"id":"Lab/Data/Overview/quiz/half-page","title":"Half Page","description":"Question Text"},"Lab/Data/Overview/quiz/malloc-brk":{"id":"Lab/Data/Overview/quiz/malloc-brk","title":"Malloc `brk()`","description":"Question Text"},"Lab/Data/Overview/quiz/malloc-mmap":{"id":"Lab/Data/Overview/quiz/malloc-mmap","title":"Malloc `mmap()`","description":"Question Text"},"Lab/Data/Overview/quiz/memory-access":{"id":"Lab/Data/Overview/quiz/memory-access","title":"Modify String","description":"Question Text"},"Lab/Data/Overview/quiz/memory-aslr":{"id":"Lab/Data/Overview/quiz/memory-aslr","title":"ASLR","description":"Question Text"},"Lab/Data/Overview/quiz/memory-granularity":{"id":"Lab/Data/Overview/quiz/memory-granularity","title":"Memory Granularity","description":"Question Text"},"Lab/Data/Overview/quiz/memory-leaks":{"id":"Lab/Data/Overview/quiz/memory-leaks","title":"Memory Leaks","description":"Question Text"},"Lab/Data/Overview/quiz/memory-regions-vars":{"id":"Lab/Data/Overview/quiz/memory-regions-vars","title":"Variables in memory regions","description":"Question Text"},"Lab/Data/Overview/quiz/memory-stack-protector":{"id":"Lab/Data/Overview/quiz/memory-stack-protector","title":"Stack Protector","description":"Question Text"},"Lab/Data/Overview/quiz/mmap-file":{"id":"Lab/Data/Overview/quiz/mmap-file","title":"`mmap()` file","description":"Question Text"},"Lab/Data/Overview/quiz/operators":{"id":"Lab/Data/Overview/quiz/operators","title":"Operator Overloading","description":"Question Text"},"Lab/Data/Overview/quiz/page-allocation":{"id":"Lab/Data/Overview/quiz/page-allocation","title":"Page Allocation","description":"Question Text"},"Lab/Data/Overview/quiz/stack-layout":{"id":"Lab/Data/Overview/quiz/stack-layout","title":"Stack layout","description":"Question Text"},"Lab/Data/Overview/quiz/string-buff-over":{"id":"Lab/Data/Overview/quiz/string-buff-over","title":"String Buffer Overflow","description":"Question Text"},"Lab/Data/Overview/quiz/string-strcpy":{"id":"Lab/Data/Overview/quiz/string-strcpy","title":"Strcpy Buffer Overflow","description":"Question Text"},"Lab/Data/Overview/quiz/valgrind-leaks":{"id":"Lab/Data/Overview/quiz/valgrind-leaks","title":"Valgrind Leaks","description":"Question Text"},"Lab/Data/Process Memory/content/arena":{"id":"Lab/Data/Process Memory/content/arena","title":"Arena","description":"Challenge tasks"},"Lab/Data/Process Memory/content/investigate-memory":{"id":"Lab/Data/Process Memory/content/investigate-memory","title":"Investigate Memory Actions","description":"Memory actions generally mean:"},"Lab/Data/Process Memory/content/memory-security":{"id":"Lab/Data/Process Memory/content/memory-security","title":"Memory Security","description":"Memory security is one of the most important aspects in today\'s computer systems."},"Lab/Data/Process Memory/content/overview":{"id":"Lab/Data/Process Memory/content/overview","title":"Data","description":"Data represents information that is to be processed to produce a final result or more data."},"Lab/Data/Process Memory/content/process-memory":{"id":"Lab/Data/Process Memory/content/process-memory","title":"Process Memory","description":"Memory Regions","sidebar":"sidebar"},"Lab/Data/Process Memory/content/working-memory":{"id":"Lab/Data/Process Memory/content/working-memory","title":"Working with Memory","description":"As previously stated, from a programmer\'s perspective, memory is abstracted into variables."},"Lab/Data/Process Memory/quiz/bypass-canary":{"id":"Lab/Data/Process Memory/quiz/bypass-canary","title":"Bypass Canary","description":"Question"},"Lab/Data/Process Memory/quiz/half-page":{"id":"Lab/Data/Process Memory/quiz/half-page","title":"Half Page","description":"Question Text"},"Lab/Data/Process Memory/quiz/malloc-brk":{"id":"Lab/Data/Process Memory/quiz/malloc-brk","title":"Malloc `brk()`","description":"Question Text"},"Lab/Data/Process Memory/quiz/malloc-mmap":{"id":"Lab/Data/Process Memory/quiz/malloc-mmap","title":"Malloc `mmap()`","description":"Question Text"},"Lab/Data/Process Memory/quiz/memory-access":{"id":"Lab/Data/Process Memory/quiz/memory-access","title":"Modify String","description":"Question Text"},"Lab/Data/Process Memory/quiz/memory-aslr":{"id":"Lab/Data/Process Memory/quiz/memory-aslr","title":"ASLR","description":"Question Text"},"Lab/Data/Process Memory/quiz/memory-granularity":{"id":"Lab/Data/Process Memory/quiz/memory-granularity","title":"Memory Granularity","description":"Question Text"},"Lab/Data/Process Memory/quiz/memory-leaks":{"id":"Lab/Data/Process Memory/quiz/memory-leaks","title":"Memory Leaks","description":"Question Text"},"Lab/Data/Process Memory/quiz/memory-regions-vars":{"id":"Lab/Data/Process Memory/quiz/memory-regions-vars","title":"Variables in memory regions","description":"Question Text"},"Lab/Data/Process Memory/quiz/memory-stack-protector":{"id":"Lab/Data/Process Memory/quiz/memory-stack-protector","title":"Stack Protector","description":"Question Text"},"Lab/Data/Process Memory/quiz/mmap-file":{"id":"Lab/Data/Process Memory/quiz/mmap-file","title":"`mmap()` file","description":"Question Text"},"Lab/Data/Process Memory/quiz/operators":{"id":"Lab/Data/Process Memory/quiz/operators","title":"Operator Overloading","description":"Question Text"},"Lab/Data/Process Memory/quiz/page-allocation":{"id":"Lab/Data/Process Memory/quiz/page-allocation","title":"Page Allocation","description":"Question Text"},"Lab/Data/Process Memory/quiz/stack-layout":{"id":"Lab/Data/Process Memory/quiz/stack-layout","title":"Stack layout","description":"Question Text"},"Lab/Data/Process Memory/quiz/string-buff-over":{"id":"Lab/Data/Process Memory/quiz/string-buff-over","title":"String Buffer Overflow","description":"Question Text"},"Lab/Data/Process Memory/quiz/string-strcpy":{"id":"Lab/Data/Process Memory/quiz/string-strcpy","title":"Strcpy Buffer Overflow","description":"Question Text"},"Lab/Data/Process Memory/quiz/valgrind-leaks":{"id":"Lab/Data/Process Memory/quiz/valgrind-leaks","title":"Valgrind Leaks","description":"Question Text"},"Lab/Data/Working with Memory/content/arena":{"id":"Lab/Data/Working with Memory/content/arena","title":"Arena","description":"Challenge tasks"},"Lab/Data/Working with Memory/content/investigate-memory":{"id":"Lab/Data/Working with Memory/content/investigate-memory","title":"Investigate Memory Actions","description":"Memory actions generally mean:"},"Lab/Data/Working with Memory/content/memory-security":{"id":"Lab/Data/Working with Memory/content/memory-security","title":"Memory Security","description":"Memory security is one of the most important aspects in today\'s computer systems."},"Lab/Data/Working with Memory/content/overview":{"id":"Lab/Data/Working with Memory/content/overview","title":"Data","description":"Data represents information that is to be processed to produce a final result or more data."},"Lab/Data/Working with Memory/content/process-memory":{"id":"Lab/Data/Working with Memory/content/process-memory","title":"Process Memory","description":"Memory Regions"},"Lab/Data/Working with Memory/content/working-memory":{"id":"Lab/Data/Working with Memory/content/working-memory","title":"Working with Memory","description":"As previously stated, from a programmer\'s perspective, memory is abstracted into variables.","sidebar":"sidebar"},"Lab/Data/Working with Memory/quiz/bypass-canary":{"id":"Lab/Data/Working with Memory/quiz/bypass-canary","title":"Bypass Canary","description":"Question"},"Lab/Data/Working with Memory/quiz/half-page":{"id":"Lab/Data/Working with Memory/quiz/half-page","title":"Half Page","description":"Question Text"},"Lab/Data/Working with Memory/quiz/malloc-brk":{"id":"Lab/Data/Working with Memory/quiz/malloc-brk","title":"Malloc `brk()`","description":"Question Text"},"Lab/Data/Working with Memory/quiz/malloc-mmap":{"id":"Lab/Data/Working with Memory/quiz/malloc-mmap","title":"Malloc `mmap()`","description":"Question Text"},"Lab/Data/Working with Memory/quiz/memory-access":{"id":"Lab/Data/Working with Memory/quiz/memory-access","title":"Modify String","description":"Question Text"},"Lab/Data/Working with Memory/quiz/memory-aslr":{"id":"Lab/Data/Working with Memory/quiz/memory-aslr","title":"ASLR","description":"Question Text"},"Lab/Data/Working with Memory/quiz/memory-granularity":{"id":"Lab/Data/Working with Memory/quiz/memory-granularity","title":"Memory Granularity","description":"Question Text"},"Lab/Data/Working with Memory/quiz/memory-leaks":{"id":"Lab/Data/Working with Memory/quiz/memory-leaks","title":"Memory Leaks","description":"Question Text"},"Lab/Data/Working with Memory/quiz/memory-regions-vars":{"id":"Lab/Data/Working with Memory/quiz/memory-regions-vars","title":"Variables in memory regions","description":"Question Text"},"Lab/Data/Working with Memory/quiz/memory-stack-protector":{"id":"Lab/Data/Working with Memory/quiz/memory-stack-protector","title":"Stack Protector","description":"Question Text"},"Lab/Data/Working with Memory/quiz/mmap-file":{"id":"Lab/Data/Working with Memory/quiz/mmap-file","title":"`mmap()` file","description":"Question Text"},"Lab/Data/Working with Memory/quiz/operators":{"id":"Lab/Data/Working with Memory/quiz/operators","title":"Operator Overloading","description":"Question Text"},"Lab/Data/Working with Memory/quiz/page-allocation":{"id":"Lab/Data/Working with Memory/quiz/page-allocation","title":"Page Allocation","description":"Question Text"},"Lab/Data/Working with Memory/quiz/stack-layout":{"id":"Lab/Data/Working with Memory/quiz/stack-layout","title":"Stack layout","description":"Question Text"},"Lab/Data/Working with Memory/quiz/string-buff-over":{"id":"Lab/Data/Working with Memory/quiz/string-buff-over","title":"String Buffer Overflow","description":"Question Text"},"Lab/Data/Working with Memory/quiz/string-strcpy":{"id":"Lab/Data/Working with Memory/quiz/string-strcpy","title":"Strcpy Buffer Overflow","description":"Question Text"},"Lab/Data/Working with Memory/quiz/valgrind-leaks":{"id":"Lab/Data/Working with Memory/quiz/valgrind-leaks","title":"Valgrind Leaks","description":"Question Text"},"Lab/I/O/Arena/content/arena":{"id":"Lab/I/O/Arena/content/arena","title":"Arena","description":"Open File Structure in the Kernel","sidebar":"sidebar"},"Lab/I/O/Arena/content/async-io":{"id":"Lab/I/O/Arena/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Arena/content/beyond-network-sockets":{"id":"Lab/I/O/Arena/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Arena/content/client-server-model":{"id":"Lab/I/O/Arena/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Arena/content/file-descriptors":{"id":"Lab/I/O/Arena/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Arena/content/file-handlers":{"id":"Lab/I/O/Arena/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Arena/content/file-mappings":{"id":"Lab/I/O/Arena/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Arena/content/io-internals":{"id":"Lab/I/O/Arena/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Arena/content/io-multiplexing":{"id":"Lab/I/O/Arena/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Arena/content/local-io-in-action":{"id":"Lab/I/O/Arena/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Arena/content/networking-101":{"id":"Lab/I/O/Arena/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Arena/content/overview":{"id":"Lab/I/O/Arena/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Arena/content/pipes":{"id":"Lab/I/O/Arena/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Arena/content/redirections":{"id":"Lab/I/O/Arena/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Arena/content/remote-io":{"id":"Lab/I/O/Arena/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Arena/content/zero-copy":{"id":"Lab/I/O/Arena/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Arena/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Arena/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Arena/quiz/bind-error-cause":{"id":"Lab/I/O/Arena/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Arena/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Arena/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Arena/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Arena/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Arena/quiz/execve":{"id":"Lab/I/O/Arena/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Arena/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Arena/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Arena/quiz/file-handler-c":{"id":"Lab/I/O/Arena/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Arena/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Arena/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Arena/quiz/flush-libc-buffer":{"id":"Lab/I/O/Arena/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Arena/quiz/fopen-syscall":{"id":"Lab/I/O/Arena/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Arena/quiz/fopen-w":{"id":"Lab/I/O/Arena/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Arena/quiz/local-io-errors":{"id":"Lab/I/O/Arena/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Arena/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Arena/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Arena/quiz/o-trunc":{"id":"Lab/I/O/Arena/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Arena/quiz/pipe-ends":{"id":"Lab/I/O/Arena/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Arena/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Arena/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Arena/quiz/receiver-socket-fd":{"id":"Lab/I/O/Arena/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Arena/quiz/server-copies":{"id":"Lab/I/O/Arena/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Arena/quiz/stderr-fd":{"id":"Lab/I/O/Arena/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Arena/quiz/strace-printf":{"id":"Lab/I/O/Arena/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Arena/quiz/syscalls-cp":{"id":"Lab/I/O/Arena/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Arena/quiz/write-file-permissions":{"id":"Lab/I/O/Arena/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Arena/support/multiplex/README":{"id":"Lab/I/O/Arena/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Arena/support/sparse-file/README":{"id":"Lab/I/O/Arena/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Asynchronous I/O/content/arena":{"id":"Lab/I/O/Asynchronous I/O/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Asynchronous I/O/content/async-io":{"id":"Lab/I/O/Asynchronous I/O/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations.","sidebar":"sidebar"},"Lab/I/O/Asynchronous I/O/content/beyond-network-sockets":{"id":"Lab/I/O/Asynchronous I/O/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Asynchronous I/O/content/client-server-model":{"id":"Lab/I/O/Asynchronous I/O/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Asynchronous I/O/content/file-descriptors":{"id":"Lab/I/O/Asynchronous I/O/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Asynchronous I/O/content/file-handlers":{"id":"Lab/I/O/Asynchronous I/O/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Asynchronous I/O/content/file-mappings":{"id":"Lab/I/O/Asynchronous I/O/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Asynchronous I/O/content/io-internals":{"id":"Lab/I/O/Asynchronous I/O/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Asynchronous I/O/content/io-multiplexing":{"id":"Lab/I/O/Asynchronous I/O/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Asynchronous I/O/content/local-io-in-action":{"id":"Lab/I/O/Asynchronous I/O/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Asynchronous I/O/content/networking-101":{"id":"Lab/I/O/Asynchronous I/O/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Asynchronous I/O/content/overview":{"id":"Lab/I/O/Asynchronous I/O/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Asynchronous I/O/content/pipes":{"id":"Lab/I/O/Asynchronous I/O/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Asynchronous I/O/content/redirections":{"id":"Lab/I/O/Asynchronous I/O/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Asynchronous I/O/content/remote-io":{"id":"Lab/I/O/Asynchronous I/O/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Asynchronous I/O/content/zero-copy":{"id":"Lab/I/O/Asynchronous I/O/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Asynchronous I/O/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Asynchronous I/O/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/bind-error-cause":{"id":"Lab/I/O/Asynchronous I/O/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Asynchronous I/O/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Asynchronous I/O/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/execve":{"id":"Lab/I/O/Asynchronous I/O/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Asynchronous I/O/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/file-handler-c":{"id":"Lab/I/O/Asynchronous I/O/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Asynchronous I/O/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/flush-libc-buffer":{"id":"Lab/I/O/Asynchronous I/O/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/fopen-syscall":{"id":"Lab/I/O/Asynchronous I/O/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/fopen-w":{"id":"Lab/I/O/Asynchronous I/O/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/local-io-errors":{"id":"Lab/I/O/Asynchronous I/O/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Asynchronous I/O/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/o-trunc":{"id":"Lab/I/O/Asynchronous I/O/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/pipe-ends":{"id":"Lab/I/O/Asynchronous I/O/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Asynchronous I/O/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/receiver-socket-fd":{"id":"Lab/I/O/Asynchronous I/O/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/server-copies":{"id":"Lab/I/O/Asynchronous I/O/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/stderr-fd":{"id":"Lab/I/O/Asynchronous I/O/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/strace-printf":{"id":"Lab/I/O/Asynchronous I/O/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/syscalls-cp":{"id":"Lab/I/O/Asynchronous I/O/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Asynchronous I/O/quiz/write-file-permissions":{"id":"Lab/I/O/Asynchronous I/O/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Asynchronous I/O/support/multiplex/README":{"id":"Lab/I/O/Asynchronous I/O/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Asynchronous I/O/support/sparse-file/README":{"id":"Lab/I/O/Asynchronous I/O/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Beyond Network Sockets/content/arena":{"id":"Lab/I/O/Beyond Network Sockets/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Beyond Network Sockets/content/async-io":{"id":"Lab/I/O/Beyond Network Sockets/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Beyond Network Sockets/content/beyond-network-sockets":{"id":"Lab/I/O/Beyond Network Sockets/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API.","sidebar":"sidebar"},"Lab/I/O/Beyond Network Sockets/content/client-server-model":{"id":"Lab/I/O/Beyond Network Sockets/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Beyond Network Sockets/content/file-descriptors":{"id":"Lab/I/O/Beyond Network Sockets/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Beyond Network Sockets/content/file-handlers":{"id":"Lab/I/O/Beyond Network Sockets/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Beyond Network Sockets/content/file-mappings":{"id":"Lab/I/O/Beyond Network Sockets/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Beyond Network Sockets/content/io-internals":{"id":"Lab/I/O/Beyond Network Sockets/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Beyond Network Sockets/content/io-multiplexing":{"id":"Lab/I/O/Beyond Network Sockets/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Beyond Network Sockets/content/local-io-in-action":{"id":"Lab/I/O/Beyond Network Sockets/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Beyond Network Sockets/content/networking-101":{"id":"Lab/I/O/Beyond Network Sockets/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Beyond Network Sockets/content/overview":{"id":"Lab/I/O/Beyond Network Sockets/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Beyond Network Sockets/content/pipes":{"id":"Lab/I/O/Beyond Network Sockets/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Beyond Network Sockets/content/redirections":{"id":"Lab/I/O/Beyond Network Sockets/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Beyond Network Sockets/content/remote-io":{"id":"Lab/I/O/Beyond Network Sockets/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Beyond Network Sockets/content/zero-copy":{"id":"Lab/I/O/Beyond Network Sockets/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Beyond Network Sockets/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Beyond Network Sockets/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/bind-error-cause":{"id":"Lab/I/O/Beyond Network Sockets/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Beyond Network Sockets/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Beyond Network Sockets/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/execve":{"id":"Lab/I/O/Beyond Network Sockets/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Beyond Network Sockets/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/file-handler-c":{"id":"Lab/I/O/Beyond Network Sockets/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Beyond Network Sockets/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/flush-libc-buffer":{"id":"Lab/I/O/Beyond Network Sockets/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/fopen-syscall":{"id":"Lab/I/O/Beyond Network Sockets/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/fopen-w":{"id":"Lab/I/O/Beyond Network Sockets/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/local-io-errors":{"id":"Lab/I/O/Beyond Network Sockets/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Beyond Network Sockets/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/o-trunc":{"id":"Lab/I/O/Beyond Network Sockets/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/pipe-ends":{"id":"Lab/I/O/Beyond Network Sockets/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Beyond Network Sockets/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/receiver-socket-fd":{"id":"Lab/I/O/Beyond Network Sockets/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/server-copies":{"id":"Lab/I/O/Beyond Network Sockets/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/stderr-fd":{"id":"Lab/I/O/Beyond Network Sockets/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/strace-printf":{"id":"Lab/I/O/Beyond Network Sockets/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/syscalls-cp":{"id":"Lab/I/O/Beyond Network Sockets/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/quiz/write-file-permissions":{"id":"Lab/I/O/Beyond Network Sockets/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Beyond Network Sockets/support/multiplex/README":{"id":"Lab/I/O/Beyond Network Sockets/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Beyond Network Sockets/support/sparse-file/README":{"id":"Lab/I/O/Beyond Network Sockets/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Client-Server Model/content/arena":{"id":"Lab/I/O/Client-Server Model/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Client-Server Model/content/async-io":{"id":"Lab/I/O/Client-Server Model/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Client-Server Model/content/beyond-network-sockets":{"id":"Lab/I/O/Client-Server Model/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Client-Server Model/content/client-server-model":{"id":"Lab/I/O/Client-Server Model/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP.","sidebar":"sidebar"},"Lab/I/O/Client-Server Model/content/file-descriptors":{"id":"Lab/I/O/Client-Server Model/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Client-Server Model/content/file-handlers":{"id":"Lab/I/O/Client-Server Model/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Client-Server Model/content/file-mappings":{"id":"Lab/I/O/Client-Server Model/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Client-Server Model/content/io-internals":{"id":"Lab/I/O/Client-Server Model/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Client-Server Model/content/io-multiplexing":{"id":"Lab/I/O/Client-Server Model/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Client-Server Model/content/local-io-in-action":{"id":"Lab/I/O/Client-Server Model/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Client-Server Model/content/networking-101":{"id":"Lab/I/O/Client-Server Model/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Client-Server Model/content/overview":{"id":"Lab/I/O/Client-Server Model/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Client-Server Model/content/pipes":{"id":"Lab/I/O/Client-Server Model/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Client-Server Model/content/redirections":{"id":"Lab/I/O/Client-Server Model/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Client-Server Model/content/remote-io":{"id":"Lab/I/O/Client-Server Model/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Client-Server Model/content/zero-copy":{"id":"Lab/I/O/Client-Server Model/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Client-Server Model/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Client-Server Model/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/bind-error-cause":{"id":"Lab/I/O/Client-Server Model/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Client-Server Model/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Client-Server Model/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/execve":{"id":"Lab/I/O/Client-Server Model/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Client-Server Model/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/file-handler-c":{"id":"Lab/I/O/Client-Server Model/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Client-Server Model/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/flush-libc-buffer":{"id":"Lab/I/O/Client-Server Model/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/fopen-syscall":{"id":"Lab/I/O/Client-Server Model/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/fopen-w":{"id":"Lab/I/O/Client-Server Model/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/local-io-errors":{"id":"Lab/I/O/Client-Server Model/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Client-Server Model/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/o-trunc":{"id":"Lab/I/O/Client-Server Model/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/pipe-ends":{"id":"Lab/I/O/Client-Server Model/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Client-Server Model/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/receiver-socket-fd":{"id":"Lab/I/O/Client-Server Model/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/server-copies":{"id":"Lab/I/O/Client-Server Model/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/stderr-fd":{"id":"Lab/I/O/Client-Server Model/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/strace-printf":{"id":"Lab/I/O/Client-Server Model/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/syscalls-cp":{"id":"Lab/I/O/Client-Server Model/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Client-Server Model/quiz/write-file-permissions":{"id":"Lab/I/O/Client-Server Model/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Client-Server Model/support/multiplex/README":{"id":"Lab/I/O/Client-Server Model/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Client-Server Model/support/sparse-file/README":{"id":"Lab/I/O/Client-Server Model/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/File Descriptors/content/arena":{"id":"Lab/I/O/File Descriptors/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/File Descriptors/content/async-io":{"id":"Lab/I/O/File Descriptors/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/File Descriptors/content/beyond-network-sockets":{"id":"Lab/I/O/File Descriptors/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/File Descriptors/content/client-server-model":{"id":"Lab/I/O/File Descriptors/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/File Descriptors/content/file-descriptors":{"id":"Lab/I/O/File Descriptors/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number.","sidebar":"sidebar"},"Lab/I/O/File Descriptors/content/file-handlers":{"id":"Lab/I/O/File Descriptors/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/File Descriptors/content/file-mappings":{"id":"Lab/I/O/File Descriptors/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/File Descriptors/content/io-internals":{"id":"Lab/I/O/File Descriptors/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/File Descriptors/content/io-multiplexing":{"id":"Lab/I/O/File Descriptors/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/File Descriptors/content/local-io-in-action":{"id":"Lab/I/O/File Descriptors/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/File Descriptors/content/networking-101":{"id":"Lab/I/O/File Descriptors/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/File Descriptors/content/overview":{"id":"Lab/I/O/File Descriptors/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/File Descriptors/content/pipes":{"id":"Lab/I/O/File Descriptors/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/File Descriptors/content/redirections":{"id":"Lab/I/O/File Descriptors/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/File Descriptors/content/remote-io":{"id":"Lab/I/O/File Descriptors/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/File Descriptors/content/zero-copy":{"id":"Lab/I/O/File Descriptors/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/File Descriptors/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/File Descriptors/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/bind-error-cause":{"id":"Lab/I/O/File Descriptors/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/client-server-sender-receiver":{"id":"Lab/I/O/File Descriptors/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/deluge-tcp-udp":{"id":"Lab/I/O/File Descriptors/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/execve":{"id":"Lab/I/O/File Descriptors/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/fewer-than-2-copies":{"id":"Lab/I/O/File Descriptors/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/file-handler-c":{"id":"Lab/I/O/File Descriptors/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/firefox-tcp-udp":{"id":"Lab/I/O/File Descriptors/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/flush-libc-buffer":{"id":"Lab/I/O/File Descriptors/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/fopen-syscall":{"id":"Lab/I/O/File Descriptors/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/fopen-w":{"id":"Lab/I/O/File Descriptors/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/local-io-errors":{"id":"Lab/I/O/File Descriptors/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/File Descriptors/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/o-trunc":{"id":"Lab/I/O/File Descriptors/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/pipe-ends":{"id":"Lab/I/O/File Descriptors/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/prints-work-no-stdio":{"id":"Lab/I/O/File Descriptors/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/receiver-socket-fd":{"id":"Lab/I/O/File Descriptors/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/server-copies":{"id":"Lab/I/O/File Descriptors/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/stderr-fd":{"id":"Lab/I/O/File Descriptors/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/strace-printf":{"id":"Lab/I/O/File Descriptors/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/syscalls-cp":{"id":"Lab/I/O/File Descriptors/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/File Descriptors/quiz/write-file-permissions":{"id":"Lab/I/O/File Descriptors/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/File Descriptors/support/multiplex/README":{"id":"Lab/I/O/File Descriptors/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/File Descriptors/support/sparse-file/README":{"id":"Lab/I/O/File Descriptors/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/File Handlers/content/arena":{"id":"Lab/I/O/File Handlers/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/File Handlers/content/async-io":{"id":"Lab/I/O/File Handlers/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/File Handlers/content/beyond-network-sockets":{"id":"Lab/I/O/File Handlers/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/File Handlers/content/client-server-model":{"id":"Lab/I/O/File Handlers/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/File Handlers/content/file-descriptors":{"id":"Lab/I/O/File Handlers/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/File Handlers/content/file-handlers":{"id":"Lab/I/O/File Handlers/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past.","sidebar":"sidebar"},"Lab/I/O/File Handlers/content/file-mappings":{"id":"Lab/I/O/File Handlers/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/File Handlers/content/io-internals":{"id":"Lab/I/O/File Handlers/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/File Handlers/content/io-multiplexing":{"id":"Lab/I/O/File Handlers/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/File Handlers/content/local-io-in-action":{"id":"Lab/I/O/File Handlers/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/File Handlers/content/networking-101":{"id":"Lab/I/O/File Handlers/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/File Handlers/content/overview":{"id":"Lab/I/O/File Handlers/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/File Handlers/content/pipes":{"id":"Lab/I/O/File Handlers/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/File Handlers/content/redirections":{"id":"Lab/I/O/File Handlers/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/File Handlers/content/remote-io":{"id":"Lab/I/O/File Handlers/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/File Handlers/content/zero-copy":{"id":"Lab/I/O/File Handlers/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/File Handlers/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/File Handlers/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/File Handlers/quiz/bind-error-cause":{"id":"Lab/I/O/File Handlers/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/File Handlers/quiz/client-server-sender-receiver":{"id":"Lab/I/O/File Handlers/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/File Handlers/quiz/deluge-tcp-udp":{"id":"Lab/I/O/File Handlers/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/File Handlers/quiz/execve":{"id":"Lab/I/O/File Handlers/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/File Handlers/quiz/fewer-than-2-copies":{"id":"Lab/I/O/File Handlers/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/File Handlers/quiz/file-handler-c":{"id":"Lab/I/O/File Handlers/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/File Handlers/quiz/firefox-tcp-udp":{"id":"Lab/I/O/File Handlers/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/File Handlers/quiz/flush-libc-buffer":{"id":"Lab/I/O/File Handlers/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/File Handlers/quiz/fopen-syscall":{"id":"Lab/I/O/File Handlers/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/File Handlers/quiz/fopen-w":{"id":"Lab/I/O/File Handlers/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/File Handlers/quiz/local-io-errors":{"id":"Lab/I/O/File Handlers/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/File Handlers/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/File Handlers/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/File Handlers/quiz/o-trunc":{"id":"Lab/I/O/File Handlers/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/File Handlers/quiz/pipe-ends":{"id":"Lab/I/O/File Handlers/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/File Handlers/quiz/prints-work-no-stdio":{"id":"Lab/I/O/File Handlers/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/File Handlers/quiz/receiver-socket-fd":{"id":"Lab/I/O/File Handlers/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/File Handlers/quiz/server-copies":{"id":"Lab/I/O/File Handlers/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/File Handlers/quiz/stderr-fd":{"id":"Lab/I/O/File Handlers/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/File Handlers/quiz/strace-printf":{"id":"Lab/I/O/File Handlers/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/File Handlers/quiz/syscalls-cp":{"id":"Lab/I/O/File Handlers/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/File Handlers/quiz/write-file-permissions":{"id":"Lab/I/O/File Handlers/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/File Handlers/support/multiplex/README":{"id":"Lab/I/O/File Handlers/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/File Handlers/support/sparse-file/README":{"id":"Lab/I/O/File Handlers/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/File Mappings/content/arena":{"id":"Lab/I/O/File Mappings/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/File Mappings/content/async-io":{"id":"Lab/I/O/File Mappings/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/File Mappings/content/beyond-network-sockets":{"id":"Lab/I/O/File Mappings/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/File Mappings/content/client-server-model":{"id":"Lab/I/O/File Mappings/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/File Mappings/content/file-descriptors":{"id":"Lab/I/O/File Mappings/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/File Mappings/content/file-handlers":{"id":"Lab/I/O/File Mappings/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/File Mappings/content/file-mappings":{"id":"Lab/I/O/File Mappings/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS.","sidebar":"sidebar"},"Lab/I/O/File Mappings/content/io-internals":{"id":"Lab/I/O/File Mappings/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/File Mappings/content/io-multiplexing":{"id":"Lab/I/O/File Mappings/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/File Mappings/content/local-io-in-action":{"id":"Lab/I/O/File Mappings/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/File Mappings/content/networking-101":{"id":"Lab/I/O/File Mappings/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/File Mappings/content/overview":{"id":"Lab/I/O/File Mappings/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/File Mappings/content/pipes":{"id":"Lab/I/O/File Mappings/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/File Mappings/content/redirections":{"id":"Lab/I/O/File Mappings/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/File Mappings/content/remote-io":{"id":"Lab/I/O/File Mappings/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/File Mappings/content/zero-copy":{"id":"Lab/I/O/File Mappings/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/File Mappings/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/File Mappings/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/File Mappings/quiz/bind-error-cause":{"id":"Lab/I/O/File Mappings/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/File Mappings/quiz/client-server-sender-receiver":{"id":"Lab/I/O/File Mappings/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/File Mappings/quiz/deluge-tcp-udp":{"id":"Lab/I/O/File Mappings/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/File Mappings/quiz/execve":{"id":"Lab/I/O/File Mappings/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/File Mappings/quiz/fewer-than-2-copies":{"id":"Lab/I/O/File Mappings/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/File Mappings/quiz/file-handler-c":{"id":"Lab/I/O/File Mappings/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/File Mappings/quiz/firefox-tcp-udp":{"id":"Lab/I/O/File Mappings/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/File Mappings/quiz/flush-libc-buffer":{"id":"Lab/I/O/File Mappings/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/File Mappings/quiz/fopen-syscall":{"id":"Lab/I/O/File Mappings/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/File Mappings/quiz/fopen-w":{"id":"Lab/I/O/File Mappings/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/File Mappings/quiz/local-io-errors":{"id":"Lab/I/O/File Mappings/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/File Mappings/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/File Mappings/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/File Mappings/quiz/o-trunc":{"id":"Lab/I/O/File Mappings/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/File Mappings/quiz/pipe-ends":{"id":"Lab/I/O/File Mappings/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/File Mappings/quiz/prints-work-no-stdio":{"id":"Lab/I/O/File Mappings/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/File Mappings/quiz/receiver-socket-fd":{"id":"Lab/I/O/File Mappings/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/File Mappings/quiz/server-copies":{"id":"Lab/I/O/File Mappings/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/File Mappings/quiz/stderr-fd":{"id":"Lab/I/O/File Mappings/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/File Mappings/quiz/strace-printf":{"id":"Lab/I/O/File Mappings/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/File Mappings/quiz/syscalls-cp":{"id":"Lab/I/O/File Mappings/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/File Mappings/quiz/write-file-permissions":{"id":"Lab/I/O/File Mappings/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/File Mappings/support/multiplex/README":{"id":"Lab/I/O/File Mappings/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/File Mappings/support/sparse-file/README":{"id":"Lab/I/O/File Mappings/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/I/O Internals/content/arena":{"id":"Lab/I/O/I/O Internals/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/I/O Internals/content/async-io":{"id":"Lab/I/O/I/O Internals/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/I/O Internals/content/beyond-network-sockets":{"id":"Lab/I/O/I/O Internals/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/I/O Internals/content/client-server-model":{"id":"Lab/I/O/I/O Internals/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/I/O Internals/content/file-descriptors":{"id":"Lab/I/O/I/O Internals/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/I/O Internals/content/file-handlers":{"id":"Lab/I/O/I/O Internals/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/I/O Internals/content/file-mappings":{"id":"Lab/I/O/I/O Internals/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/I/O Internals/content/io-internals":{"id":"Lab/I/O/I/O Internals/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc.","sidebar":"sidebar"},"Lab/I/O/I/O Internals/content/io-multiplexing":{"id":"Lab/I/O/I/O Internals/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/I/O Internals/content/local-io-in-action":{"id":"Lab/I/O/I/O Internals/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/I/O Internals/content/networking-101":{"id":"Lab/I/O/I/O Internals/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/I/O Internals/content/overview":{"id":"Lab/I/O/I/O Internals/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/I/O Internals/content/pipes":{"id":"Lab/I/O/I/O Internals/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/I/O Internals/content/redirections":{"id":"Lab/I/O/I/O Internals/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/I/O Internals/content/remote-io":{"id":"Lab/I/O/I/O Internals/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/I/O Internals/content/zero-copy":{"id":"Lab/I/O/I/O Internals/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/I/O Internals/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/I/O Internals/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/bind-error-cause":{"id":"Lab/I/O/I/O Internals/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/client-server-sender-receiver":{"id":"Lab/I/O/I/O Internals/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/deluge-tcp-udp":{"id":"Lab/I/O/I/O Internals/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/execve":{"id":"Lab/I/O/I/O Internals/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/fewer-than-2-copies":{"id":"Lab/I/O/I/O Internals/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/file-handler-c":{"id":"Lab/I/O/I/O Internals/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/firefox-tcp-udp":{"id":"Lab/I/O/I/O Internals/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/flush-libc-buffer":{"id":"Lab/I/O/I/O Internals/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/fopen-syscall":{"id":"Lab/I/O/I/O Internals/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/fopen-w":{"id":"Lab/I/O/I/O Internals/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/local-io-errors":{"id":"Lab/I/O/I/O Internals/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/I/O Internals/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/o-trunc":{"id":"Lab/I/O/I/O Internals/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/pipe-ends":{"id":"Lab/I/O/I/O Internals/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/prints-work-no-stdio":{"id":"Lab/I/O/I/O Internals/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/receiver-socket-fd":{"id":"Lab/I/O/I/O Internals/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/server-copies":{"id":"Lab/I/O/I/O Internals/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/stderr-fd":{"id":"Lab/I/O/I/O Internals/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/strace-printf":{"id":"Lab/I/O/I/O Internals/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/syscalls-cp":{"id":"Lab/I/O/I/O Internals/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/I/O Internals/quiz/write-file-permissions":{"id":"Lab/I/O/I/O Internals/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/I/O Internals/support/multiplex/README":{"id":"Lab/I/O/I/O Internals/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/I/O Internals/support/sparse-file/README":{"id":"Lab/I/O/I/O Internals/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/I/O Multiplexing/content/arena":{"id":"Lab/I/O/I/O Multiplexing/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/I/O Multiplexing/content/async-io":{"id":"Lab/I/O/I/O Multiplexing/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/I/O Multiplexing/content/beyond-network-sockets":{"id":"Lab/I/O/I/O Multiplexing/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/I/O Multiplexing/content/client-server-model":{"id":"Lab/I/O/I/O Multiplexing/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/I/O Multiplexing/content/file-descriptors":{"id":"Lab/I/O/I/O Multiplexing/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/I/O Multiplexing/content/file-handlers":{"id":"Lab/I/O/I/O Multiplexing/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/I/O Multiplexing/content/file-mappings":{"id":"Lab/I/O/I/O Multiplexing/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/I/O Multiplexing/content/io-internals":{"id":"Lab/I/O/I/O Multiplexing/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/I/O Multiplexing/content/io-multiplexing":{"id":"Lab/I/O/I/O Multiplexing/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously.","sidebar":"sidebar"},"Lab/I/O/I/O Multiplexing/content/local-io-in-action":{"id":"Lab/I/O/I/O Multiplexing/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/I/O Multiplexing/content/networking-101":{"id":"Lab/I/O/I/O Multiplexing/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/I/O Multiplexing/content/overview":{"id":"Lab/I/O/I/O Multiplexing/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/I/O Multiplexing/content/pipes":{"id":"Lab/I/O/I/O Multiplexing/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/I/O Multiplexing/content/redirections":{"id":"Lab/I/O/I/O Multiplexing/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/I/O Multiplexing/content/remote-io":{"id":"Lab/I/O/I/O Multiplexing/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/I/O Multiplexing/content/zero-copy":{"id":"Lab/I/O/I/O Multiplexing/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/I/O Multiplexing/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/I/O Multiplexing/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/bind-error-cause":{"id":"Lab/I/O/I/O Multiplexing/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/client-server-sender-receiver":{"id":"Lab/I/O/I/O Multiplexing/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/deluge-tcp-udp":{"id":"Lab/I/O/I/O Multiplexing/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/execve":{"id":"Lab/I/O/I/O Multiplexing/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/fewer-than-2-copies":{"id":"Lab/I/O/I/O Multiplexing/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/file-handler-c":{"id":"Lab/I/O/I/O Multiplexing/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/firefox-tcp-udp":{"id":"Lab/I/O/I/O Multiplexing/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/flush-libc-buffer":{"id":"Lab/I/O/I/O Multiplexing/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/fopen-syscall":{"id":"Lab/I/O/I/O Multiplexing/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/fopen-w":{"id":"Lab/I/O/I/O Multiplexing/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/local-io-errors":{"id":"Lab/I/O/I/O Multiplexing/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/I/O Multiplexing/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/o-trunc":{"id":"Lab/I/O/I/O Multiplexing/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/pipe-ends":{"id":"Lab/I/O/I/O Multiplexing/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/prints-work-no-stdio":{"id":"Lab/I/O/I/O Multiplexing/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/receiver-socket-fd":{"id":"Lab/I/O/I/O Multiplexing/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/server-copies":{"id":"Lab/I/O/I/O Multiplexing/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/stderr-fd":{"id":"Lab/I/O/I/O Multiplexing/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/strace-printf":{"id":"Lab/I/O/I/O Multiplexing/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/syscalls-cp":{"id":"Lab/I/O/I/O Multiplexing/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/I/O Multiplexing/quiz/write-file-permissions":{"id":"Lab/I/O/I/O Multiplexing/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/I/O Multiplexing/support/multiplex/README":{"id":"Lab/I/O/I/O Multiplexing/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/I/O Multiplexing/support/sparse-file/README":{"id":"Lab/I/O/I/O Multiplexing/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Local I/O in Action/content/arena":{"id":"Lab/I/O/Local I/O in Action/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Local I/O in Action/content/async-io":{"id":"Lab/I/O/Local I/O in Action/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Local I/O in Action/content/beyond-network-sockets":{"id":"Lab/I/O/Local I/O in Action/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Local I/O in Action/content/client-server-model":{"id":"Lab/I/O/Local I/O in Action/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Local I/O in Action/content/file-descriptors":{"id":"Lab/I/O/Local I/O in Action/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Local I/O in Action/content/file-handlers":{"id":"Lab/I/O/Local I/O in Action/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Local I/O in Action/content/file-mappings":{"id":"Lab/I/O/Local I/O in Action/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Local I/O in Action/content/io-internals":{"id":"Lab/I/O/Local I/O in Action/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Local I/O in Action/content/io-multiplexing":{"id":"Lab/I/O/Local I/O in Action/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Local I/O in Action/content/local-io-in-action":{"id":"Lab/I/O/Local I/O in Action/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application.","sidebar":"sidebar"},"Lab/I/O/Local I/O in Action/content/networking-101":{"id":"Lab/I/O/Local I/O in Action/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Local I/O in Action/content/overview":{"id":"Lab/I/O/Local I/O in Action/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Local I/O in Action/content/pipes":{"id":"Lab/I/O/Local I/O in Action/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Local I/O in Action/content/redirections":{"id":"Lab/I/O/Local I/O in Action/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Local I/O in Action/content/remote-io":{"id":"Lab/I/O/Local I/O in Action/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Local I/O in Action/content/zero-copy":{"id":"Lab/I/O/Local I/O in Action/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Local I/O in Action/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Local I/O in Action/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/bind-error-cause":{"id":"Lab/I/O/Local I/O in Action/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Local I/O in Action/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Local I/O in Action/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/execve":{"id":"Lab/I/O/Local I/O in Action/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Local I/O in Action/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/file-handler-c":{"id":"Lab/I/O/Local I/O in Action/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Local I/O in Action/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/flush-libc-buffer":{"id":"Lab/I/O/Local I/O in Action/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/fopen-syscall":{"id":"Lab/I/O/Local I/O in Action/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/fopen-w":{"id":"Lab/I/O/Local I/O in Action/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/local-io-errors":{"id":"Lab/I/O/Local I/O in Action/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Local I/O in Action/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/o-trunc":{"id":"Lab/I/O/Local I/O in Action/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/pipe-ends":{"id":"Lab/I/O/Local I/O in Action/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Local I/O in Action/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/receiver-socket-fd":{"id":"Lab/I/O/Local I/O in Action/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/server-copies":{"id":"Lab/I/O/Local I/O in Action/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/stderr-fd":{"id":"Lab/I/O/Local I/O in Action/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/strace-printf":{"id":"Lab/I/O/Local I/O in Action/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/syscalls-cp":{"id":"Lab/I/O/Local I/O in Action/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Local I/O in Action/quiz/write-file-permissions":{"id":"Lab/I/O/Local I/O in Action/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Local I/O in Action/support/multiplex/README":{"id":"Lab/I/O/Local I/O in Action/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Local I/O in Action/support/sparse-file/README":{"id":"Lab/I/O/Local I/O in Action/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Networking 101/content/arena":{"id":"Lab/I/O/Networking 101/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Networking 101/content/async-io":{"id":"Lab/I/O/Networking 101/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Networking 101/content/beyond-network-sockets":{"id":"Lab/I/O/Networking 101/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Networking 101/content/client-server-model":{"id":"Lab/I/O/Networking 101/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Networking 101/content/file-descriptors":{"id":"Lab/I/O/Networking 101/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Networking 101/content/file-handlers":{"id":"Lab/I/O/Networking 101/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Networking 101/content/file-mappings":{"id":"Lab/I/O/Networking 101/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Networking 101/content/io-internals":{"id":"Lab/I/O/Networking 101/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Networking 101/content/io-multiplexing":{"id":"Lab/I/O/Networking 101/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Networking 101/content/local-io-in-action":{"id":"Lab/I/O/Networking 101/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Networking 101/content/networking-101":{"id":"Lab/I/O/Networking 101/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application.","sidebar":"sidebar"},"Lab/I/O/Networking 101/content/overview":{"id":"Lab/I/O/Networking 101/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Networking 101/content/pipes":{"id":"Lab/I/O/Networking 101/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Networking 101/content/redirections":{"id":"Lab/I/O/Networking 101/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Networking 101/content/remote-io":{"id":"Lab/I/O/Networking 101/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Networking 101/content/zero-copy":{"id":"Lab/I/O/Networking 101/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Networking 101/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Networking 101/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Networking 101/quiz/bind-error-cause":{"id":"Lab/I/O/Networking 101/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Networking 101/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Networking 101/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Networking 101/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Networking 101/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Networking 101/quiz/execve":{"id":"Lab/I/O/Networking 101/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Networking 101/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Networking 101/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Networking 101/quiz/file-handler-c":{"id":"Lab/I/O/Networking 101/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Networking 101/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Networking 101/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Networking 101/quiz/flush-libc-buffer":{"id":"Lab/I/O/Networking 101/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Networking 101/quiz/fopen-syscall":{"id":"Lab/I/O/Networking 101/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Networking 101/quiz/fopen-w":{"id":"Lab/I/O/Networking 101/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Networking 101/quiz/local-io-errors":{"id":"Lab/I/O/Networking 101/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Networking 101/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Networking 101/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Networking 101/quiz/o-trunc":{"id":"Lab/I/O/Networking 101/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Networking 101/quiz/pipe-ends":{"id":"Lab/I/O/Networking 101/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Networking 101/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Networking 101/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Networking 101/quiz/receiver-socket-fd":{"id":"Lab/I/O/Networking 101/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Networking 101/quiz/server-copies":{"id":"Lab/I/O/Networking 101/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Networking 101/quiz/stderr-fd":{"id":"Lab/I/O/Networking 101/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Networking 101/quiz/strace-printf":{"id":"Lab/I/O/Networking 101/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Networking 101/quiz/syscalls-cp":{"id":"Lab/I/O/Networking 101/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Networking 101/quiz/write-file-permissions":{"id":"Lab/I/O/Networking 101/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Networking 101/support/multiplex/README":{"id":"Lab/I/O/Networking 101/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Networking 101/support/sparse-file/README":{"id":"Lab/I/O/Networking 101/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Overview/content/arena":{"id":"Lab/I/O/Overview/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Overview/content/async-io":{"id":"Lab/I/O/Overview/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Overview/content/beyond-network-sockets":{"id":"Lab/I/O/Overview/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Overview/content/client-server-model":{"id":"Lab/I/O/Overview/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Overview/content/file-descriptors":{"id":"Lab/I/O/Overview/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Overview/content/file-handlers":{"id":"Lab/I/O/Overview/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Overview/content/file-mappings":{"id":"Lab/I/O/Overview/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Overview/content/io-internals":{"id":"Lab/I/O/Overview/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Overview/content/io-multiplexing":{"id":"Lab/I/O/Overview/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Overview/content/local-io-in-action":{"id":"Lab/I/O/Overview/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Overview/content/networking-101":{"id":"Lab/I/O/Overview/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Overview/content/overview":{"id":"Lab/I/O/Overview/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data.","sidebar":"sidebar"},"Lab/I/O/Overview/content/pipes":{"id":"Lab/I/O/Overview/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Overview/content/redirections":{"id":"Lab/I/O/Overview/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Overview/content/remote-io":{"id":"Lab/I/O/Overview/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Overview/content/zero-copy":{"id":"Lab/I/O/Overview/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Overview/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Overview/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Overview/quiz/bind-error-cause":{"id":"Lab/I/O/Overview/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Overview/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Overview/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Overview/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Overview/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Overview/quiz/execve":{"id":"Lab/I/O/Overview/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Overview/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Overview/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Overview/quiz/file-handler-c":{"id":"Lab/I/O/Overview/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Overview/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Overview/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Overview/quiz/flush-libc-buffer":{"id":"Lab/I/O/Overview/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Overview/quiz/fopen-syscall":{"id":"Lab/I/O/Overview/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Overview/quiz/fopen-w":{"id":"Lab/I/O/Overview/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Overview/quiz/local-io-errors":{"id":"Lab/I/O/Overview/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Overview/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Overview/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Overview/quiz/o-trunc":{"id":"Lab/I/O/Overview/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Overview/quiz/pipe-ends":{"id":"Lab/I/O/Overview/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Overview/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Overview/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Overview/quiz/receiver-socket-fd":{"id":"Lab/I/O/Overview/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Overview/quiz/server-copies":{"id":"Lab/I/O/Overview/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Overview/quiz/stderr-fd":{"id":"Lab/I/O/Overview/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Overview/quiz/strace-printf":{"id":"Lab/I/O/Overview/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Overview/quiz/syscalls-cp":{"id":"Lab/I/O/Overview/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Overview/quiz/write-file-permissions":{"id":"Lab/I/O/Overview/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Overview/support/multiplex/README":{"id":"Lab/I/O/Overview/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Overview/support/sparse-file/README":{"id":"Lab/I/O/Overview/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Pipes/content/arena":{"id":"Lab/I/O/Pipes/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Pipes/content/async-io":{"id":"Lab/I/O/Pipes/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Pipes/content/beyond-network-sockets":{"id":"Lab/I/O/Pipes/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Pipes/content/client-server-model":{"id":"Lab/I/O/Pipes/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Pipes/content/file-descriptors":{"id":"Lab/I/O/Pipes/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Pipes/content/file-handlers":{"id":"Lab/I/O/Pipes/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Pipes/content/file-mappings":{"id":"Lab/I/O/Pipes/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Pipes/content/io-internals":{"id":"Lab/I/O/Pipes/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Pipes/content/io-multiplexing":{"id":"Lab/I/O/Pipes/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Pipes/content/local-io-in-action":{"id":"Lab/I/O/Pipes/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Pipes/content/networking-101":{"id":"Lab/I/O/Pipes/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Pipes/content/overview":{"id":"Lab/I/O/Pipes/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Pipes/content/pipes":{"id":"Lab/I/O/Pipes/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow.","sidebar":"sidebar"},"Lab/I/O/Pipes/content/redirections":{"id":"Lab/I/O/Pipes/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Pipes/content/remote-io":{"id":"Lab/I/O/Pipes/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Pipes/content/zero-copy":{"id":"Lab/I/O/Pipes/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Pipes/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Pipes/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Pipes/quiz/bind-error-cause":{"id":"Lab/I/O/Pipes/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Pipes/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Pipes/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Pipes/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Pipes/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Pipes/quiz/execve":{"id":"Lab/I/O/Pipes/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Pipes/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Pipes/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Pipes/quiz/file-handler-c":{"id":"Lab/I/O/Pipes/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Pipes/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Pipes/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Pipes/quiz/flush-libc-buffer":{"id":"Lab/I/O/Pipes/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Pipes/quiz/fopen-syscall":{"id":"Lab/I/O/Pipes/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Pipes/quiz/fopen-w":{"id":"Lab/I/O/Pipes/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Pipes/quiz/local-io-errors":{"id":"Lab/I/O/Pipes/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Pipes/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Pipes/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Pipes/quiz/o-trunc":{"id":"Lab/I/O/Pipes/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Pipes/quiz/pipe-ends":{"id":"Lab/I/O/Pipes/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Pipes/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Pipes/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Pipes/quiz/receiver-socket-fd":{"id":"Lab/I/O/Pipes/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Pipes/quiz/server-copies":{"id":"Lab/I/O/Pipes/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Pipes/quiz/stderr-fd":{"id":"Lab/I/O/Pipes/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Pipes/quiz/strace-printf":{"id":"Lab/I/O/Pipes/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Pipes/quiz/syscalls-cp":{"id":"Lab/I/O/Pipes/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Pipes/quiz/write-file-permissions":{"id":"Lab/I/O/Pipes/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Pipes/support/multiplex/README":{"id":"Lab/I/O/Pipes/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Pipes/support/sparse-file/README":{"id":"Lab/I/O/Pipes/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Redirections/content/arena":{"id":"Lab/I/O/Redirections/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Redirections/content/async-io":{"id":"Lab/I/O/Redirections/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Redirections/content/beyond-network-sockets":{"id":"Lab/I/O/Redirections/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Redirections/content/client-server-model":{"id":"Lab/I/O/Redirections/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Redirections/content/file-descriptors":{"id":"Lab/I/O/Redirections/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Redirections/content/file-handlers":{"id":"Lab/I/O/Redirections/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Redirections/content/file-mappings":{"id":"Lab/I/O/Redirections/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Redirections/content/io-internals":{"id":"Lab/I/O/Redirections/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Redirections/content/io-multiplexing":{"id":"Lab/I/O/Redirections/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Redirections/content/local-io-in-action":{"id":"Lab/I/O/Redirections/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Redirections/content/networking-101":{"id":"Lab/I/O/Redirections/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Redirections/content/overview":{"id":"Lab/I/O/Redirections/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Redirections/content/pipes":{"id":"Lab/I/O/Redirections/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Redirections/content/redirections":{"id":"Lab/I/O/Redirections/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt.","sidebar":"sidebar"},"Lab/I/O/Redirections/content/remote-io":{"id":"Lab/I/O/Redirections/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Redirections/content/zero-copy":{"id":"Lab/I/O/Redirections/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Redirections/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Redirections/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Redirections/quiz/bind-error-cause":{"id":"Lab/I/O/Redirections/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Redirections/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Redirections/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Redirections/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Redirections/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Redirections/quiz/execve":{"id":"Lab/I/O/Redirections/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Redirections/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Redirections/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Redirections/quiz/file-handler-c":{"id":"Lab/I/O/Redirections/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Redirections/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Redirections/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Redirections/quiz/flush-libc-buffer":{"id":"Lab/I/O/Redirections/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Redirections/quiz/fopen-syscall":{"id":"Lab/I/O/Redirections/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Redirections/quiz/fopen-w":{"id":"Lab/I/O/Redirections/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Redirections/quiz/local-io-errors":{"id":"Lab/I/O/Redirections/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Redirections/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Redirections/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Redirections/quiz/o-trunc":{"id":"Lab/I/O/Redirections/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Redirections/quiz/pipe-ends":{"id":"Lab/I/O/Redirections/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Redirections/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Redirections/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Redirections/quiz/receiver-socket-fd":{"id":"Lab/I/O/Redirections/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Redirections/quiz/server-copies":{"id":"Lab/I/O/Redirections/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Redirections/quiz/stderr-fd":{"id":"Lab/I/O/Redirections/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Redirections/quiz/strace-printf":{"id":"Lab/I/O/Redirections/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Redirections/quiz/syscalls-cp":{"id":"Lab/I/O/Redirections/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Redirections/quiz/write-file-permissions":{"id":"Lab/I/O/Redirections/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Redirections/support/multiplex/README":{"id":"Lab/I/O/Redirections/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Redirections/support/sparse-file/README":{"id":"Lab/I/O/Redirections/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Remote I/O/content/arena":{"id":"Lab/I/O/Remote I/O/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Remote I/O/content/async-io":{"id":"Lab/I/O/Remote I/O/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Remote I/O/content/beyond-network-sockets":{"id":"Lab/I/O/Remote I/O/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Remote I/O/content/client-server-model":{"id":"Lab/I/O/Remote I/O/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Remote I/O/content/file-descriptors":{"id":"Lab/I/O/Remote I/O/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Remote I/O/content/file-handlers":{"id":"Lab/I/O/Remote I/O/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Remote I/O/content/file-mappings":{"id":"Lab/I/O/Remote I/O/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Remote I/O/content/io-internals":{"id":"Lab/I/O/Remote I/O/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Remote I/O/content/io-multiplexing":{"id":"Lab/I/O/Remote I/O/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Remote I/O/content/local-io-in-action":{"id":"Lab/I/O/Remote I/O/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Remote I/O/content/networking-101":{"id":"Lab/I/O/Remote I/O/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Remote I/O/content/overview":{"id":"Lab/I/O/Remote I/O/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Remote I/O/content/pipes":{"id":"Lab/I/O/Remote I/O/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Remote I/O/content/redirections":{"id":"Lab/I/O/Remote I/O/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Remote I/O/content/remote-io":{"id":"Lab/I/O/Remote I/O/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world.","sidebar":"sidebar"},"Lab/I/O/Remote I/O/content/zero-copy":{"id":"Lab/I/O/Remote I/O/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally."},"Lab/I/O/Remote I/O/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Remote I/O/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/bind-error-cause":{"id":"Lab/I/O/Remote I/O/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Remote I/O/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Remote I/O/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/execve":{"id":"Lab/I/O/Remote I/O/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Remote I/O/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/file-handler-c":{"id":"Lab/I/O/Remote I/O/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Remote I/O/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/flush-libc-buffer":{"id":"Lab/I/O/Remote I/O/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/fopen-syscall":{"id":"Lab/I/O/Remote I/O/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/fopen-w":{"id":"Lab/I/O/Remote I/O/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/local-io-errors":{"id":"Lab/I/O/Remote I/O/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Remote I/O/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/o-trunc":{"id":"Lab/I/O/Remote I/O/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/pipe-ends":{"id":"Lab/I/O/Remote I/O/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Remote I/O/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/receiver-socket-fd":{"id":"Lab/I/O/Remote I/O/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/server-copies":{"id":"Lab/I/O/Remote I/O/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/stderr-fd":{"id":"Lab/I/O/Remote I/O/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/strace-printf":{"id":"Lab/I/O/Remote I/O/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/syscalls-cp":{"id":"Lab/I/O/Remote I/O/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Remote I/O/quiz/write-file-permissions":{"id":"Lab/I/O/Remote I/O/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Remote I/O/support/multiplex/README":{"id":"Lab/I/O/Remote I/O/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Remote I/O/support/sparse-file/README":{"id":"Lab/I/O/Remote I/O/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/I/O/Zero-Copy/content/arena":{"id":"Lab/I/O/Zero-Copy/content/arena","title":"Arena","description":"Open File Structure in the Kernel"},"Lab/I/O/Zero-Copy/content/async-io":{"id":"Lab/I/O/Zero-Copy/content/async-io","title":"Asynchronous I/O","description":"When doing I/O, the major issue we are facing is that I/O operations are typically much slower than CPU operations."},"Lab/I/O/Zero-Copy/content/beyond-network-sockets":{"id":"Lab/I/O/Zero-Copy/content/beyond-network-sockets","title":"Beyond Network Sockets","description":"Up until this point, we first learned how to use the Berkeley Sockets API, then we learned what a client and a server is, based on this API."},"Lab/I/O/Zero-Copy/content/client-server-model":{"id":"Lab/I/O/Zero-Copy/content/client-server-model","title":"Client-Server Model","description":"Up to now we\'ve avoided code snippets using TCP."},"Lab/I/O/Zero-Copy/content/file-descriptors":{"id":"Lab/I/O/Zero-Copy/content/file-descriptors","title":"File Descriptors","description":"After running the code in the \\"File Handlers\\" section, you saw that open() returns a number."},"Lab/I/O/Zero-Copy/content/file-handlers":{"id":"Lab/I/O/Zero-Copy/content/file-handlers","title":"File Handling","description":"You\'ve most likely had to deal with files in the past."},"Lab/I/O/Zero-Copy/content/file-mappings":{"id":"Lab/I/O/Zero-Copy/content/file-mappings","title":"File Mappings","description":"Mapping a file to the VAS of a process is similar to how shared libraries are loaded into the same VAS."},"Lab/I/O/Zero-Copy/content/io-internals":{"id":"Lab/I/O/Zero-Copy/content/io-internals","title":"I/O Internals","description":"Now we will take a short look at how the file descriptors you\'ve just learnt about are handled in libc."},"Lab/I/O/Zero-Copy/content/io-multiplexing":{"id":"Lab/I/O/Zero-Copy/content/io-multiplexing","title":"I/O Multiplexing","description":"I/O multiplexing is the ability to serve multiple I/O channels (or anything that can be referenced via a file descriptor / handle) simultaneously."},"Lab/I/O/Zero-Copy/content/local-io-in-action":{"id":"Lab/I/O/Zero-Copy/content/local-io-in-action","title":"Local I/O in Action","description":"Most of the time, file handling is a simple operation from the perspective of the application."},"Lab/I/O/Zero-Copy/content/networking-101":{"id":"Lab/I/O/Zero-Copy/content/networking-101","title":"Networking 101","description":"In this section we will briefly explore how networking works in general, from the perspective of the application."},"Lab/I/O/Zero-Copy/content/overview":{"id":"Lab/I/O/Zero-Copy/content/overview","title":"I/O","description":"We know that a compute system is a collection of hardware and software that modifies data."},"Lab/I/O/Zero-Copy/content/pipes":{"id":"Lab/I/O/Zero-Copy/content/pipes","title":"Pipes","description":"When it comes to inter-process communication, so far we know that 2 different processes can mmap() the same file and use that as some sort of shared memory, but this requires writing data to the disk which is slow."},"Lab/I/O/Zero-Copy/content/redirections":{"id":"Lab/I/O/Zero-Copy/content/redirections","title":"Redirections","description":"In the File Descriptors section, we mentioned redirections such as ls > file.txt."},"Lab/I/O/Zero-Copy/content/remote-io":{"id":"Lab/I/O/Zero-Copy/content/remote-io","title":"Remote I/O","description":"In the previous sections, we started looking into how applications interact with the outside world."},"Lab/I/O/Zero-Copy/content/zero-copy":{"id":"Lab/I/O/Zero-Copy/content/zero-copy","title":"Zero-Copy","description":"Imagine a server that responds with files that it stores locally.","sidebar":"sidebar"},"Lab/I/O/Zero-Copy/quiz/anonymous-pipes-limitation":{"id":"Lab/I/O/Zero-Copy/quiz/anonymous-pipes-limitation","title":"Limitation of Anonymous Pipes","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/bind-error-cause":{"id":"Lab/I/O/Zero-Copy/quiz/bind-error-cause","title":"Cause of `bind()` Error","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/client-server-sender-receiver":{"id":"Lab/I/O/Zero-Copy/quiz/client-server-sender-receiver","title":"`sender.py` and `receiver.py` Client-Server Parallel","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/deluge-tcp-udp":{"id":"Lab/I/O/Zero-Copy/quiz/deluge-tcp-udp","title":"Deluge: TCP or UDP","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/execve":{"id":"Lab/I/O/Zero-Copy/quiz/execve","title":"Effect of `execve()` Syscall","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/fewer-than-2-copies":{"id":"Lab/I/O/Zero-Copy/quiz/fewer-than-2-copies","title":"Fewer than Two Copies","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/file-handler-c":{"id":"Lab/I/O/Zero-Copy/quiz/file-handler-c","title":"File handler in C","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/firefox-tcp-udp":{"id":"Lab/I/O/Zero-Copy/quiz/firefox-tcp-udp","title":"Firefox: TCP or UDP?","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/flush-libc-buffer":{"id":"Lab/I/O/Zero-Copy/quiz/flush-libc-buffer","title":"Flush Libc Buffer","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/fopen-syscall":{"id":"Lab/I/O/Zero-Copy/quiz/fopen-syscall","title":"Syscall Used by `fopen()`","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/fopen-w":{"id":"Lab/I/O/Zero-Copy/quiz/fopen-w","title":"open()` equivalent of `fopen(..., \\"w\\")","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/local-io-errors":{"id":"Lab/I/O/Zero-Copy/quiz/local-io-errors","title":"I/O Errors","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/mmap-read-write-benchmark":{"id":"Lab/I/O/Zero-Copy/quiz/mmap-read-write-benchmark","title":"`mmap()` vs `read()` and `write()` Benchmark","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/o-trunc":{"id":"Lab/I/O/Zero-Copy/quiz/o-trunc","title":"`O_TRUNC` Flag Behaviour","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/pipe-ends":{"id":"Lab/I/O/Zero-Copy/quiz/pipe-ends","title":"Pipe Ends","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/prints-work-no-stdio":{"id":"Lab/I/O/Zero-Copy/quiz/prints-work-no-stdio","title":"Prints Working after Closing `stdio`","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/receiver-socket-fd":{"id":"Lab/I/O/Zero-Copy/quiz/receiver-socket-fd","title":"Receiver Socked File Descriptor","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/server-copies":{"id":"Lab/I/O/Zero-Copy/quiz/server-copies","title":"Client-Server Number of Copies","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/stderr-fd":{"id":"Lab/I/O/Zero-Copy/quiz/stderr-fd","title":"File Descriptor of `stderr`","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/strace-printf":{"id":"Lab/I/O/Zero-Copy/quiz/strace-printf","title":"`printf()` Under Strace","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/syscalls-cp":{"id":"Lab/I/O/Zero-Copy/quiz/syscalls-cp","title":"Syscalls Used by `cp`","description":"Question Text"},"Lab/I/O/Zero-Copy/quiz/write-file-permissions":{"id":"Lab/I/O/Zero-Copy/quiz/write-file-permissions","title":"`write_file.txt` Permissions","description":"Question Text"},"Lab/I/O/Zero-Copy/support/multiplex/README":{"id":"Lab/I/O/Zero-Copy/support/multiplex/README","title":"epoll echo-reply server","description":"Use make to compile the epoll()-based echo-reply server:"},"Lab/I/O/Zero-Copy/support/sparse-file/README":{"id":"Lab/I/O/Zero-Copy/support/sparse-file/README","title":"Sparse File","description":"The swiss_cheese.sparse file is a sparse file."},"Lab/Setting up the Lab Environment/lab-setup":{"id":"Lab/Setting up the Lab Environment/lab-setup","title":"Setting up the Lab Environment","description":"If you have already cloned the repository, make sure it is updated:","sidebar":"sidebar"},"Lab/Software Stack/App Investigation/content/app-investigate":{"id":"Lab/Software Stack/App Investigation/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system.","sidebar":"sidebar"},"Lab/Software Stack/App Investigation/content/arena":{"id":"Lab/Software Stack/App Investigation/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/App Investigation/content/basic-syscall":{"id":"Lab/Software Stack/App Investigation/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/App Investigation/content/common-functions":{"id":"Lab/Software Stack/App Investigation/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/App Investigation/content/high-level-lang":{"id":"Lab/Software Stack/App Investigation/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/App Investigation/content/libc":{"id":"Lab/Software Stack/App Investigation/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/App Investigation/content/libcall-syscall":{"id":"Lab/Software Stack/App Investigation/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/App Investigation/content/modern-sw-stack":{"id":"Lab/Software Stack/App Investigation/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/App Investigation/content/overview":{"id":"Lab/Software Stack/App Investigation/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/App Investigation/content/static-dynamic":{"id":"Lab/Software Stack/App Investigation/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/App Investigation/content/syscall-wrapper":{"id":"Lab/Software Stack/App Investigation/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/App Investigation/quiz/common-functions":{"id":"Lab/Software Stack/App Investigation/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/App Investigation/quiz/high-level-lang":{"id":"Lab/Software Stack/App Investigation/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/App Investigation/quiz/libc":{"id":"Lab/Software Stack/App Investigation/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/App Investigation/quiz/libcall-syscall":{"id":"Lab/Software Stack/App Investigation/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/App Investigation/quiz/libs":{"id":"Lab/Software Stack/App Investigation/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/App Investigation/quiz/software":{"id":"Lab/Software Stack/App Investigation/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/App Investigation/quiz/syscall-wrapper":{"id":"Lab/Software Stack/App Investigation/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/App Investigation/quiz/syscalls":{"id":"Lab/Software Stack/App Investigation/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Arena/content/app-investigate":{"id":"Lab/Software Stack/Arena/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Arena/content/arena":{"id":"Lab/Software Stack/Arena/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack.","sidebar":"sidebar"},"Lab/Software Stack/Arena/content/basic-syscall":{"id":"Lab/Software Stack/Arena/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Arena/content/common-functions":{"id":"Lab/Software Stack/Arena/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Arena/content/high-level-lang":{"id":"Lab/Software Stack/Arena/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Arena/content/libc":{"id":"Lab/Software Stack/Arena/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Arena/content/libcall-syscall":{"id":"Lab/Software Stack/Arena/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Arena/content/modern-sw-stack":{"id":"Lab/Software Stack/Arena/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Arena/content/overview":{"id":"Lab/Software Stack/Arena/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Arena/content/static-dynamic":{"id":"Lab/Software Stack/Arena/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Arena/content/syscall-wrapper":{"id":"Lab/Software Stack/Arena/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Arena/quiz/common-functions":{"id":"Lab/Software Stack/Arena/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Arena/quiz/high-level-lang":{"id":"Lab/Software Stack/Arena/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Arena/quiz/libc":{"id":"Lab/Software Stack/Arena/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Arena/quiz/libcall-syscall":{"id":"Lab/Software Stack/Arena/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Arena/quiz/libs":{"id":"Lab/Software Stack/Arena/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Arena/quiz/software":{"id":"Lab/Software Stack/Arena/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Arena/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Arena/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Arena/quiz/syscalls":{"id":"Lab/Software Stack/Arena/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Basic System Calls/content/app-investigate":{"id":"Lab/Software Stack/Basic System Calls/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Basic System Calls/content/arena":{"id":"Lab/Software Stack/Basic System Calls/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Basic System Calls/content/basic-syscall":{"id":"Lab/Software Stack/Basic System Calls/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:","sidebar":"sidebar"},"Lab/Software Stack/Basic System Calls/content/common-functions":{"id":"Lab/Software Stack/Basic System Calls/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Basic System Calls/content/high-level-lang":{"id":"Lab/Software Stack/Basic System Calls/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Basic System Calls/content/libc":{"id":"Lab/Software Stack/Basic System Calls/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Basic System Calls/content/libcall-syscall":{"id":"Lab/Software Stack/Basic System Calls/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Basic System Calls/content/modern-sw-stack":{"id":"Lab/Software Stack/Basic System Calls/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Basic System Calls/content/overview":{"id":"Lab/Software Stack/Basic System Calls/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Basic System Calls/content/static-dynamic":{"id":"Lab/Software Stack/Basic System Calls/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Basic System Calls/content/syscall-wrapper":{"id":"Lab/Software Stack/Basic System Calls/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Basic System Calls/quiz/common-functions":{"id":"Lab/Software Stack/Basic System Calls/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Basic System Calls/quiz/high-level-lang":{"id":"Lab/Software Stack/Basic System Calls/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Basic System Calls/quiz/libc":{"id":"Lab/Software Stack/Basic System Calls/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Basic System Calls/quiz/libcall-syscall":{"id":"Lab/Software Stack/Basic System Calls/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Basic System Calls/quiz/libs":{"id":"Lab/Software Stack/Basic System Calls/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Basic System Calls/quiz/software":{"id":"Lab/Software Stack/Basic System Calls/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Basic System Calls/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Basic System Calls/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Basic System Calls/quiz/syscalls":{"id":"Lab/Software Stack/Basic System Calls/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Common Functions/content/app-investigate":{"id":"Lab/Software Stack/Common Functions/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Common Functions/content/arena":{"id":"Lab/Software Stack/Common Functions/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Common Functions/content/basic-syscall":{"id":"Lab/Software Stack/Common Functions/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Common Functions/content/common-functions":{"id":"Lab/Software Stack/Common Functions/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C.","sidebar":"sidebar"},"Lab/Software Stack/Common Functions/content/high-level-lang":{"id":"Lab/Software Stack/Common Functions/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Common Functions/content/libc":{"id":"Lab/Software Stack/Common Functions/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Common Functions/content/libcall-syscall":{"id":"Lab/Software Stack/Common Functions/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Common Functions/content/modern-sw-stack":{"id":"Lab/Software Stack/Common Functions/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Common Functions/content/overview":{"id":"Lab/Software Stack/Common Functions/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Common Functions/content/static-dynamic":{"id":"Lab/Software Stack/Common Functions/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Common Functions/content/syscall-wrapper":{"id":"Lab/Software Stack/Common Functions/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Common Functions/quiz/common-functions":{"id":"Lab/Software Stack/Common Functions/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Common Functions/quiz/high-level-lang":{"id":"Lab/Software Stack/Common Functions/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Common Functions/quiz/libc":{"id":"Lab/Software Stack/Common Functions/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Common Functions/quiz/libcall-syscall":{"id":"Lab/Software Stack/Common Functions/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Common Functions/quiz/libs":{"id":"Lab/Software Stack/Common Functions/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Common Functions/quiz/software":{"id":"Lab/Software Stack/Common Functions/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Common Functions/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Common Functions/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Common Functions/quiz/syscalls":{"id":"Lab/Software Stack/Common Functions/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/High-Level Languages/content/app-investigate":{"id":"Lab/Software Stack/High-Level Languages/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/High-Level Languages/content/arena":{"id":"Lab/Software Stack/High-Level Languages/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/High-Level Languages/content/basic-syscall":{"id":"Lab/Software Stack/High-Level Languages/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/High-Level Languages/content/common-functions":{"id":"Lab/Software Stack/High-Level Languages/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/High-Level Languages/content/high-level-lang":{"id":"Lab/Software Stack/High-Level Languages/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features.","sidebar":"sidebar"},"Lab/Software Stack/High-Level Languages/content/libc":{"id":"Lab/Software Stack/High-Level Languages/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/High-Level Languages/content/libcall-syscall":{"id":"Lab/Software Stack/High-Level Languages/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/High-Level Languages/content/modern-sw-stack":{"id":"Lab/Software Stack/High-Level Languages/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/High-Level Languages/content/overview":{"id":"Lab/Software Stack/High-Level Languages/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/High-Level Languages/content/static-dynamic":{"id":"Lab/Software Stack/High-Level Languages/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/High-Level Languages/content/syscall-wrapper":{"id":"Lab/Software Stack/High-Level Languages/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/High-Level Languages/quiz/common-functions":{"id":"Lab/Software Stack/High-Level Languages/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/High-Level Languages/quiz/high-level-lang":{"id":"Lab/Software Stack/High-Level Languages/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/High-Level Languages/quiz/libc":{"id":"Lab/Software Stack/High-Level Languages/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/High-Level Languages/quiz/libcall-syscall":{"id":"Lab/Software Stack/High-Level Languages/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/High-Level Languages/quiz/libs":{"id":"Lab/Software Stack/High-Level Languages/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/High-Level Languages/quiz/software":{"id":"Lab/Software Stack/High-Level Languages/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/High-Level Languages/quiz/syscall-wrapper":{"id":"Lab/Software Stack/High-Level Languages/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/High-Level Languages/quiz/syscalls":{"id":"Lab/Software Stack/High-Level Languages/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Libc/content/app-investigate":{"id":"Lab/Software Stack/Libc/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Libc/content/arena":{"id":"Lab/Software Stack/Libc/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Libc/content/basic-syscall":{"id":"Lab/Software Stack/Libc/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Libc/content/common-functions":{"id":"Lab/Software Stack/Libc/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Libc/content/high-level-lang":{"id":"Lab/Software Stack/Libc/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Libc/content/libc":{"id":"Lab/Software Stack/Libc/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time.","sidebar":"sidebar"},"Lab/Software Stack/Libc/content/libcall-syscall":{"id":"Lab/Software Stack/Libc/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Libc/content/modern-sw-stack":{"id":"Lab/Software Stack/Libc/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Libc/content/overview":{"id":"Lab/Software Stack/Libc/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Libc/content/static-dynamic":{"id":"Lab/Software Stack/Libc/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Libc/content/syscall-wrapper":{"id":"Lab/Software Stack/Libc/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Libc/quiz/common-functions":{"id":"Lab/Software Stack/Libc/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Libc/quiz/high-level-lang":{"id":"Lab/Software Stack/Libc/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Libc/quiz/libc":{"id":"Lab/Software Stack/Libc/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Libc/quiz/libcall-syscall":{"id":"Lab/Software Stack/Libc/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Libc/quiz/libs":{"id":"Lab/Software Stack/Libc/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Libc/quiz/software":{"id":"Lab/Software Stack/Libc/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Libc/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Libc/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Libc/quiz/syscalls":{"id":"Lab/Software Stack/Libc/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Libcall-Syscall/content/app-investigate":{"id":"Lab/Software Stack/Libcall-Syscall/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Libcall-Syscall/content/arena":{"id":"Lab/Software Stack/Libcall-Syscall/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Libcall-Syscall/content/basic-syscall":{"id":"Lab/Software Stack/Libcall-Syscall/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Libcall-Syscall/content/common-functions":{"id":"Lab/Software Stack/Libcall-Syscall/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Libcall-Syscall/content/high-level-lang":{"id":"Lab/Software Stack/Libcall-Syscall/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Libcall-Syscall/content/libc":{"id":"Lab/Software Stack/Libcall-Syscall/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Libcall-Syscall/content/libcall-syscall":{"id":"Lab/Software Stack/Libcall-Syscall/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:","sidebar":"sidebar"},"Lab/Software Stack/Libcall-Syscall/content/modern-sw-stack":{"id":"Lab/Software Stack/Libcall-Syscall/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Libcall-Syscall/content/overview":{"id":"Lab/Software Stack/Libcall-Syscall/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Libcall-Syscall/content/static-dynamic":{"id":"Lab/Software Stack/Libcall-Syscall/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Libcall-Syscall/content/syscall-wrapper":{"id":"Lab/Software Stack/Libcall-Syscall/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Libcall-Syscall/quiz/common-functions":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Libcall-Syscall/quiz/high-level-lang":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Libcall-Syscall/quiz/libc":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Libcall-Syscall/quiz/libcall-syscall":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Libcall-Syscall/quiz/libs":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Libcall-Syscall/quiz/software":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Libcall-Syscall/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Libcall-Syscall/quiz/syscalls":{"id":"Lab/Software Stack/Libcall-Syscall/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Modern Software Stacks/content/app-investigate":{"id":"Lab/Software Stack/Modern Software Stacks/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Modern Software Stacks/content/arena":{"id":"Lab/Software Stack/Modern Software Stacks/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Modern Software Stacks/content/basic-syscall":{"id":"Lab/Software Stack/Modern Software Stacks/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Modern Software Stacks/content/common-functions":{"id":"Lab/Software Stack/Modern Software Stacks/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Modern Software Stacks/content/high-level-lang":{"id":"Lab/Software Stack/Modern Software Stacks/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Modern Software Stacks/content/libc":{"id":"Lab/Software Stack/Modern Software Stacks/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Modern Software Stacks/content/libcall-syscall":{"id":"Lab/Software Stack/Modern Software Stacks/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Modern Software Stacks/content/modern-sw-stack":{"id":"Lab/Software Stack/Modern Software Stacks/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:","sidebar":"sidebar"},"Lab/Software Stack/Modern Software Stacks/content/overview":{"id":"Lab/Software Stack/Modern Software Stacks/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Modern Software Stacks/content/static-dynamic":{"id":"Lab/Software Stack/Modern Software Stacks/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Modern Software Stacks/content/syscall-wrapper":{"id":"Lab/Software Stack/Modern Software Stacks/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Modern Software Stacks/quiz/common-functions":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Modern Software Stacks/quiz/high-level-lang":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Modern Software Stacks/quiz/libc":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Modern Software Stacks/quiz/libcall-syscall":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Modern Software Stacks/quiz/libs":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Modern Software Stacks/quiz/software":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Modern Software Stacks/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Modern Software Stacks/quiz/syscalls":{"id":"Lab/Software Stack/Modern Software Stacks/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Overview/content/app-investigate":{"id":"Lab/Software Stack/Overview/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Overview/content/arena":{"id":"Lab/Software Stack/Overview/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Overview/content/basic-syscall":{"id":"Lab/Software Stack/Overview/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Overview/content/common-functions":{"id":"Lab/Software Stack/Overview/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Overview/content/high-level-lang":{"id":"Lab/Software Stack/Overview/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Overview/content/libc":{"id":"Lab/Software Stack/Overview/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Overview/content/libcall-syscall":{"id":"Lab/Software Stack/Overview/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Overview/content/modern-sw-stack":{"id":"Lab/Software Stack/Overview/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Overview/content/overview":{"id":"Lab/Software Stack/Overview/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU.","sidebar":"sidebar"},"Lab/Software Stack/Overview/content/static-dynamic":{"id":"Lab/Software Stack/Overview/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/Overview/content/syscall-wrapper":{"id":"Lab/Software Stack/Overview/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Overview/quiz/common-functions":{"id":"Lab/Software Stack/Overview/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Overview/quiz/high-level-lang":{"id":"Lab/Software Stack/Overview/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Overview/quiz/libc":{"id":"Lab/Software Stack/Overview/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Overview/quiz/libcall-syscall":{"id":"Lab/Software Stack/Overview/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Overview/quiz/libs":{"id":"Lab/Software Stack/Overview/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Overview/quiz/software":{"id":"Lab/Software Stack/Overview/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Overview/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Overview/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Overview/quiz/syscalls":{"id":"Lab/Software Stack/Overview/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/Static-dynamic/content/app-investigate":{"id":"Lab/Software Stack/Static-dynamic/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/Static-dynamic/content/arena":{"id":"Lab/Software Stack/Static-dynamic/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/Static-dynamic/content/basic-syscall":{"id":"Lab/Software Stack/Static-dynamic/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/Static-dynamic/content/common-functions":{"id":"Lab/Software Stack/Static-dynamic/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/Static-dynamic/content/high-level-lang":{"id":"Lab/Software Stack/Static-dynamic/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/Static-dynamic/content/libc":{"id":"Lab/Software Stack/Static-dynamic/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/Static-dynamic/content/libcall-syscall":{"id":"Lab/Software Stack/Static-dynamic/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/Static-dynamic/content/modern-sw-stack":{"id":"Lab/Software Stack/Static-dynamic/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/Static-dynamic/content/overview":{"id":"Lab/Software Stack/Static-dynamic/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/Static-dynamic/content/static-dynamic":{"id":"Lab/Software Stack/Static-dynamic/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables.","sidebar":"sidebar"},"Lab/Software Stack/Static-dynamic/content/syscall-wrapper":{"id":"Lab/Software Stack/Static-dynamic/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions."},"Lab/Software Stack/Static-dynamic/quiz/common-functions":{"id":"Lab/Software Stack/Static-dynamic/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/Static-dynamic/quiz/high-level-lang":{"id":"Lab/Software Stack/Static-dynamic/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/Static-dynamic/quiz/libc":{"id":"Lab/Software Stack/Static-dynamic/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/Static-dynamic/quiz/libcall-syscall":{"id":"Lab/Software Stack/Static-dynamic/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/Static-dynamic/quiz/libs":{"id":"Lab/Software Stack/Static-dynamic/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/Static-dynamic/quiz/software":{"id":"Lab/Software Stack/Static-dynamic/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/Static-dynamic/quiz/syscall-wrapper":{"id":"Lab/Software Stack/Static-dynamic/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/Static-dynamic/quiz/syscalls":{"id":"Lab/Software Stack/Static-dynamic/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lab/Software Stack/System Call Wrapper/content/app-investigate":{"id":"Lab/Software Stack/System Call Wrapper/content/app-investigate","title":"App Investigation","description":"Let\'s spend some time investigating actual applications residing on the local system."},"Lab/Software Stack/System Call Wrapper/content/arena":{"id":"Lab/Software Stack/System Call Wrapper/content/arena","title":"Arena","description":"Go through the practice items below to hone your skills in working with layers of the software stack."},"Lab/Software Stack/System Call Wrapper/content/basic-syscall":{"id":"Lab/Software Stack/System Call Wrapper/content/basic-syscall","title":"Analyzing the Software Stack","description":"To get a better grasp on how the software stack works, let\'s do a bottom-up approach:"},"Lab/Software Stack/System Call Wrapper/content/common-functions":{"id":"Lab/Software Stack/System Call Wrapper/content/common-functions","title":"Common Functions","description":"By using wrapper calls, we are able to write our programs in C."},"Lab/Software Stack/System Call Wrapper/content/high-level-lang":{"id":"Lab/Software Stack/System Call Wrapper/content/high-level-lang","title":"High-Level Languages","description":"Using the standard C library (libc) frees the programmer from the cumbersome steps of invoking system calls and reimplementing common features."},"Lab/Software Stack/System Call Wrapper/content/libc":{"id":"Lab/Software Stack/System Call Wrapper/content/libc","title":"Libraries and libc","description":"Once we have common functions implemented, we can reuse them at any time."},"Lab/Software Stack/System Call Wrapper/content/libcall-syscall":{"id":"Lab/Software Stack/System Call Wrapper/content/libcall-syscall","title":"Library calls vs system calls","description":"The standard C library has primarily two uses:"},"Lab/Software Stack/System Call Wrapper/content/modern-sw-stack":{"id":"Lab/Software Stack/System Call Wrapper/content/modern-sw-stack","title":"Modern Software Stacks","description":"Most modern computing systems use a software stack such as the one in the figure below:"},"Lab/Software Stack/System Call Wrapper/content/overview":{"id":"Lab/Software Stack/System Call Wrapper/content/overview","title":"Software Stack","description":"Software comprises of code and data that is loaded in memory and used by the CPU."},"Lab/Software Stack/System Call Wrapper/content/static-dynamic":{"id":"Lab/Software Stack/System Call Wrapper/content/static-dynamic","title":"Statically-linked and Dynamically-linked Libraries","description":"Libraries can be statically-linked or dynamically-linked, creating statically-linked executables and dynamically-linked executables."},"Lab/Software Stack/System Call Wrapper/content/syscall-wrapper":{"id":"Lab/Software Stack/System Call Wrapper/content/syscall-wrapper","title":"System Call Wrappers","description":"The support/syscall-wrapper/ folder stores the implementation of a simple program written in C (main.c) that calls the write() and exit() functions.","sidebar":"sidebar"},"Lab/Software Stack/System Call Wrapper/quiz/common-functions":{"id":"Lab/Software Stack/System Call Wrapper/quiz/common-functions","title":"Common Functions","description":"printf() System Call"},"Lab/Software Stack/System Call Wrapper/quiz/high-level-lang":{"id":"Lab/Software Stack/System Call Wrapper/quiz/high-level-lang","title":"Python Tools","description":"Question Text"},"Lab/Software Stack/System Call Wrapper/quiz/libc":{"id":"Lab/Software Stack/System Call Wrapper/quiz/libc","title":"libc","description":"malloc()"},"Lab/Software Stack/System Call Wrapper/quiz/libcall-syscall":{"id":"Lab/Software Stack/System Call Wrapper/quiz/libcall-syscall","title":"Libcall with Syscall","description":"Question Text"},"Lab/Software Stack/System Call Wrapper/quiz/libs":{"id":"Lab/Software Stack/System Call Wrapper/quiz/libs","title":"libs","description":"Static Executables"},"Lab/Software Stack/System Call Wrapper/quiz/software":{"id":"Lab/Software Stack/System Call Wrapper/quiz/software","title":"Software Properties","description":"Question Text"},"Lab/Software Stack/System Call Wrapper/quiz/syscall-wrapper":{"id":"Lab/Software Stack/System Call Wrapper/quiz/syscall-wrapper","title":"Syscall Wrappers","description":"Question Text"},"Lab/Software Stack/System Call Wrapper/quiz/syscalls":{"id":"Lab/Software Stack/System Call Wrapper/quiz/syscalls","title":"Syscalls","description":"Syscall ID"},"Lecture/Application Interaction/Application-Interaction":{"id":"Lecture/Application Interaction/Application-Interaction","title":"Application-Interaction","description":"Focus the slides and press F for fullscreen viewing.","sidebar":"sidebar"},"Lecture/Compute/Compute":{"id":"Lecture/Compute/Compute","title":"Compute","description":"Focus the slides and press F for fullscreen viewing.","sidebar":"sidebar"},"Lecture/Data/Data":{"id":"Lecture/Data/Data","title":"Data","description":"Focus the slides and press F for fullscreen viewing.","sidebar":"sidebar"},"Lecture/IO/IO":{"id":"Lecture/IO/IO","title":"IO","description":"Focus the slides and press F for fullscreen viewing.","sidebar":"sidebar"},"Lecture/Software Stack/Software-Stack":{"id":"Lecture/Software Stack/Software-Stack","title":"Software-Stack","description":"Focus the slides and press F for fullscreen viewing.","sidebar":"sidebar"}}}')}}]);